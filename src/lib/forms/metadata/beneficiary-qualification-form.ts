import {
  ClientType,
  FieldType,
  FormMetadata,
  FormModule,
  FormPermission,
  ValidationRuleType,
} from "../types";
import { formRegistry } from "../registry";

/**
 * Beneficiary Qualification Form (F01.2)
 * Used to evaluate and determine if a beneficiary meets program eligibility criteria
 */
export const beneficiaryQualificationForm: FormMetadata = {
  id: "beneficiary-qualification-form",
  title: "Beneficiary Qualification",
  description:
    "Evaluate and determine if a beneficiary meets program eligibility criteria",
  module: FormModule.BENEFICIARY,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: [
      "admin",
      "manager",
      "beneficiary-officer",
      "case-manager",
      "committee-member",
    ],
    [FormPermission.CREATE]: ["admin", "manager", "beneficiary-officer"],
    [FormPermission.EDIT]: ["admin", "manager", "beneficiary-officer"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["admin", "manager", "committee-member"],
    [FormPermission.REJECT]: ["admin", "manager", "committee-member"],
    [FormPermission.SUBMIT]: ["admin", "manager", "beneficiary-officer"],
    [FormPermission.PRINT]: [
      "admin",
      "manager",
      "beneficiary-officer",
      "case-manager",
      "committee-member",
    ],
    [FormPermission.EXPORT]: ["admin", "manager"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: [
    {
      id: "beneficiary-information",
      title: "Beneficiary Information",
      description: "Basic information about the beneficiary",
      order: 1,
      collapsible: false,
    },
    {
      id: "eligibility-criteria",
      title: "Eligibility Criteria Assessment",
      description: "Assessment of eligibility criteria",
      order: 2,
      collapsible: false,
    },
    {
      id: "document-verification",
      title: "Document Verification",
      description: "Verification of required documents",
      order: 3,
      collapsible: true,
    },
    {
      id: "assessor-information",
      title: "Assessor Information",
      description: "Information about the qualification assessor",
      order: 4,
      collapsible: true,
    },
    {
      id: "qualification-decision",
      title: "Qualification Decision",
      description: "Final qualification decision",
      order: 5,
      collapsible: false,
    },
    {
      id: "manager-approval",
      title: "Manager Approval",
      description: "Manager review and approval",
      order: 6,
      collapsible: true,
    },
  ],
  fields: [
    {
      id: "qualification-id",
      name: "qualificationId",
      label: "Qualification ID",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "beneficiary-information",
      order: 1,
      width: "full",
      helpText: "Auto-generated unique identifier (Format: QUAL-YYYY-NNNNN)",
      defaultValue: "",
    },
    {
      id: "beneficiary-id",
      name: "beneficiaryId",
      label: "Beneficiary",
      type: FieldType.LOOKUP,
      required: true,
      section: "beneficiary-information",
      order: 2,
      width: "full",
      dataSource: {
        type: "api",
        source: "/api/v1/beneficiaries",
        valueField: "id",
        labelField: "fullName",
        filters: { status: "active" },
      },
    },
    {
      id: "beneficiary-name",
      name: "beneficiaryName",
      label: "Beneficiary Name",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "beneficiary-information",
      order: 3,
      width: "full",
      dependencies: [
        {
          type: "value",
          sourceField: "beneficiaryId",
          condition: "!!value",
          action: "fetchBeneficiaryName(value)",
        },
      ],
    },
    {
      id: "application-date",
      name: "applicationDate",
      label: "Application Date",
      type: FieldType.DATE,
      required: true,
      section: "beneficiary-information",
      order: 4,
      width: "full",
      defaultValue: new Date().toISOString().split("T")[0],
      validation: [
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const appDate = new Date(value);
            const today = new Date();
            return appDate <= today;
          },
          message: "Application date cannot be in the future",
        },
      ],
    },
    {
      id: "age-qualification",
      name: "ageQualification",
      label: "Age Qualification (â‰¥60 years)",
      type: FieldType.CHECKBOX,
      required: true,
      section: "eligibility-criteria",
      order: 1,
      width: "half",
      defaultValue: false,
    },
    {
      id: "age-qualification-notes",
      name: "ageQualificationNotes",
      label: "Age Qualification Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about age qualification",
      required: false,
      section: "eligibility-criteria",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "id-verification-status",
      name: "idVerificationStatus",
      label: "ID Verification Status",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 3,
      width: "half",
      defaultValue: "Pending Verification",
      options: [
        { value: "Verified", label: "Verified" },
        { value: "Not Verified", label: "Not Verified" },
        { value: "Pending Verification", label: "Pending Verification" },
        { value: "Verification Failed", label: "Verification Failed" },
      ],
    },
    {
      id: "id-verification-notes",
      name: "idVerificationNotes",
      label: "ID Verification Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about ID verification",
      required: false,
      section: "eligibility-criteria",
      order: 4,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "residency-status",
      name: "residencyStatus",
      label: "Residency Status",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 5,
      width: "half",
      options: [
        { value: "Citizen", label: "Citizen" },
        { value: "Resident", label: "Resident" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "residency-eligible",
      name: "residencyEligible",
      label: "Residency Eligibility",
      type: FieldType.CHECKBOX,
      required: true,
      section: "eligibility-criteria",
      order: 6,
      width: "half",
      defaultValue: false,
    },
    {
      id: "residency-notes",
      name: "residencyNotes",
      label: "Residency Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about residency status",
      required: false,
      section: "eligibility-criteria",
      order: 7,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "income-qualification-status",
      name: "incomeQualificationStatus",
      label: "Income Level Assessment",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 8,
      width: "half",
      options: [
        { value: "Below Threshold", label: "Below Threshold" },
        { value: "At Threshold", label: "At Threshold" },
        { value: "Above Threshold", label: "Above Threshold" },
      ],
    },
    {
      id: "income-eligible",
      name: "incomeEligible",
      label: "Income Eligibility",
      type: FieldType.CHECKBOX,
      required: true,
      section: "eligibility-criteria",
      order: 9,
      width: "half",
      defaultValue: false,
    },
    {
      id: "income-notes",
      name: "incomeNotes",
      label: "Income Qualification Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about income qualification",
      required: false,
      section: "eligibility-criteria",
      order: 10,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "health-status-qualification-status",
      name: "healthStatusQualificationStatus",
      label: "Health Status Assessment",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 11,
      width: "half",
      options: [
        { value: "Qualifies", label: "Qualifies" },
        { value: "Does Not Qualify", label: "Does Not Qualify" },
        {
          value: "Needs Further Assessment",
          label: "Needs Further Assessment",
        },
      ],
    },
    {
      id: "health-eligible",
      name: "healthEligible",
      label: "Health Eligibility",
      type: FieldType.CHECKBOX,
      required: true,
      section: "eligibility-criteria",
      order: 12,
      width: "half",
      defaultValue: false,
    },
    {
      id: "health-notes",
      name: "healthNotes",
      label: "Health Qualification Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about health qualification",
      required: false,
      section: "eligibility-criteria",
      order: 13,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "housing-condition-status",
      name: "housingConditionStatus",
      label: "Housing Condition Assessment",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 14,
      width: "half",
      options: [
        {
          value: "Suitable for Modification",
          label: "Suitable for Modification",
        },
        {
          value: "Requires Major Renovation",
          label: "Requires Major Renovation",
        },
        {
          value: "Not Suitable for Modification",
          label: "Not Suitable for Modification",
        },
        {
          value: "Needs Further Assessment",
          label: "Needs Further Assessment",
        },
      ],
    },
    {
      id: "housing-eligible",
      name: "housingEligible",
      label: "Housing Eligibility",
      type: FieldType.CHECKBOX,
      required: true,
      section: "eligibility-criteria",
      order: 15,
      width: "half",
      defaultValue: false,
    },
    {
      id: "housing-notes",
      name: "housingNotes",
      label: "Housing Condition Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about housing condition",
      required: false,
      section: "eligibility-criteria",
      order: 16,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "social-support-network-status",
      name: "socialSupportNetworkStatus",
      label: "Social Support Network",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 17,
      width: "half",
      options: [
        { value: "Strong Support", label: "Strong Support" },
        { value: "Moderate Support", label: "Moderate Support" },
        { value: "Limited Support", label: "Limited Support" },
        { value: "No Support", label: "No Support" },
      ],
    },
    {
      id: "social-support-notes",
      name: "socialSupportNotes",
      label: "Social Support Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about social support network",
      required: false,
      section: "eligibility-criteria",
      order: 18,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "urgency-level",
      name: "urgencyLevel",
      label: "Urgency Level",
      type: FieldType.SELECT,
      required: true,
      section: "eligibility-criteria",
      order: 19,
      width: "half",
      options: [
        { value: "Critical", label: "Critical" },
        { value: "High", label: "High" },
        { value: "Medium", label: "Medium" },
        { value: "Low", label: "Low" },
      ],
    },
    {
      id: "urgency-notes",
      name: "urgencyNotes",
      label: "Urgency Assessment Notes",
      type: FieldType.TEXT,
      placeholder: "Enter notes about urgency assessment",
      required: false,
      section: "eligibility-criteria",
      order: 20,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 200,
          message: "Notes cannot exceed 200 characters",
        },
      ],
    },
    {
      id: "special-considerations",
      name: "specialConsiderations",
      label: "Special Considerations",
      type: FieldType.TEXTAREA,
      placeholder: "Enter any special circumstances or considerations",
      required: false,
      section: "eligibility-criteria",
      order: 21,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Special considerations cannot exceed 500 characters",
        },
      ],
    },
    {
      id: "documents-verified",
      name: "documentsVerified",
      label: "Verified Documents",
      type: FieldType.REPEATER,
      required: true,
      section: "document-verification",
      order: 1,
      width: "full",
      fields: [
        {
          id: "document-type",
          name: "documentType",
          label: "Document Type",
          type: FieldType.SELECT,
          required: true,
          width: "half",
          options: [
            { value: "Emirates ID", label: "Emirates ID" },
            { value: "Passport", label: "Passport" },
            { value: "Family Book", label: "Family Book" },
            { value: "Property Deed", label: "Property Deed" },
            { value: "Rental Agreement", label: "Rental Agreement" },
            { value: "Income Certificate", label: "Income Certificate" },
            { value: "Medical Report", label: "Medical Report" },
            { value: "Other", label: "Other" },
          ],
        },
        {
          id: "verification-status",
          name: "verificationStatus",
          label: "Verification Status",
          type: FieldType.SELECT,
          required: true,
          width: "half",
          options: [
            { value: "Verified", label: "Verified" },
            { value: "Not Verified", label: "Not Verified" },
            { value: "Pending", label: "Pending" },
          ],
        },
      ],
      validation: [
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: any[]) => value && value.length >= 1,
          message: "At least one document must be verified",
        },
      ],
    },
    {
      id: "missing-documents",
      name: "missingDocuments",
      label: "Missing Documents",
      type: FieldType.REPEATER,
      required: false,
      section: "document-verification",
      order: 2,
      width: "full",
      fields: [
        {
          id: "document-type",
          name: "documentType",
          label: "Document Type",
          type: FieldType.SELECT,
          required: true,
          width: "half",
          options: [
            { value: "Emirates ID", label: "Emirates ID" },
            { value: "Passport", label: "Passport" },
            { value: "Family Book", label: "Family Book" },
            { value: "Property Deed", label: "Property Deed" },
            { value: "Rental Agreement", label: "Rental Agreement" },
            { value: "Income Certificate", label: "Income Certificate" },
            { value: "Medical Report", label: "Medical Report" },
            { value: "Other", label: "Other" },
          ],
        },
        {
          id: "required-by-date",
          name: "requiredByDate",
          label: "Required By Date",
          type: FieldType.DATE,
          required: true,
          width: "half",
        },
      ],
    },
    {
      id: "assessor-name",
      name: "assessorName",
      label: "Assessor Name",
      type: FieldType.TEXT,
      required: true,
      section: "assessor-information",
      order: 1,
      width: "half",
      defaultValue: "", // Will be populated with current user name
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Assessor name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Assessor name must be at least 3 characters",
        },
      ],
    },
    {
      id: "assessor-position",
      name: "assessorPosition",
      label: "Assessor Position",
      type: FieldType.TEXT,
      required: true,
      section: "assessor-information",
      order: 2,
      width: "half",
      defaultValue: "", // Will be populated with current user position
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Assessor position is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Assessor position must be at least 3 characters",
        },
      ],
    },
    {
      id: "assessor-id",
      name: "assessorId",
      label: "Assessor ID",
      type: FieldType.HIDDEN,
      required: true,
      section: "assessor-information",
      order: 3,
      width: "full",
      defaultValue: "", // Will be populated with current user ID
    },
    {
      id: "assessment-date",
      name: "assessmentDate",
      label: "Assessment Date",
      type: FieldType.DATE,
      required: true,
      section: "assessor-information",
      order: 4,
      width: "full",
      defaultValue: new Date().toISOString().split("T")[0],
      validation: [
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const assessDate = new Date(value);
            const today = new Date();
            return assessDate <= today;
          },
          message: "Assessment date cannot be in the future",
        },
      ],
    },
    {
      id: "qualification-status",
      name: "qualificationStatus",
      label: "Qualification Status",
      type: FieldType.SELECT,
      required: true,
      section: "qualification-decision",
      order: 1,
      width: "full",
      defaultValue: "Pending",
      options: [
        { value: "Pending", label: "Pending" },
        { value: "Qualified", label: "Qualified" },
        { value: "Not Qualified", label: "Not Qualified" },
        { value: "Conditionally Qualified", label: "Conditionally Qualified" },
        {
          value: "Requires Additional Information",
          label: "Requires Additional Information",
        },
      ],
    },
    {
      id: "rejection-reason",
      name: "rejectionReason",
      label: "Rejection Reason",
      type: FieldType.TEXTAREA,
      placeholder: "Enter reason for rejection",
      required: false,
      section: "qualification-decision",
      order: 2,
      width: "full",
      dependencies: [
        {
          type: "requirement",
          sourceField: "qualificationStatus",
          condition: "value === 'Not Qualified'",
          action: "required = true",
        },
        {
          type: "visibility",
          sourceField: "qualificationStatus",
          condition:
            "value === 'Not Qualified' || value === 'Conditionally Qualified'",
          action: "visible = true",
        },
      ],
    },
    {
      id: "qualification-notes",
      name: "qualificationNotes",
      label: "Qualification Notes",
      type: FieldType.TEXTAREA,
      placeholder: "Enter additional notes or comments",
      required: false,
      section: "qualification-decision",
      order: 3,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 1000,
          message: "Notes cannot exceed 1000 characters",
        },
      ],
    },
    {
      id: "manager-approval",
      name: "managerApproval",
      label: "Manager Approval",
      type: FieldType.CHECKBOX,
      required: true,
      section: "manager-approval",
      order: 1,
      width: "full",
      defaultValue: false,
    },
    {
      id: "manager-name",
      name: "managerName",
      label: "Manager Name",
      type: FieldType.TEXT,
      required: true,
      section: "manager-approval",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Manager name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Manager name must be at least 3 characters",
        },
      ],
      dependencies: [
        {
          type: "requirement",
          sourceField: "managerApproval",
          condition: "value === true",
          action: "required = true",
        },
      ],
    },
    {
      id: "manager-id",
      name: "managerId",
      label: "Manager ID",
      type: FieldType.HIDDEN,
      required: true,
      section: "manager-approval",
      order: 3,
      width: "full",
      dependencies: [
        {
          type: "requirement",
          sourceField: "managerApproval",
          condition: "value === true",
          action: "required = true",
        },
      ],
    },
    {
      id: "approval-date",
      name: "approvalDate",
      label: "Approval Date",
      type: FieldType.DATE,
      required: true,
      section: "manager-approval",
      order: 4,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const approvalDate = new Date(value);
            const today = new Date();
            return approvalDate <= today;
          },
          message: "Approval date cannot be in the future",
        },
      ],
      dependencies: [
        {
          type: "requirement",
          sourceField: "managerApproval",
          condition: "value === true",
          action: "required = true",
        },
      ],
    },
    {
      id: "manager-comments",
      name: "managerComments",
      label: "Manager Comments",
      type: FieldType.TEXTAREA,
      placeholder: "Enter manager comments",
      required: false,
      section: "manager-approval",
      order: 5,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Comments cannot exceed 500 characters",
        },
      ],
    },
  ],
  dependencies: [
    {
      formId: "beneficiary-registration-form",
      description: "Qualification must be linked to a registered beneficiary",
      type: "prerequisite",
      required: true,
    },
  ],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

// Register form with the form registry
formRegistry.registerForm(
  {
    id: beneficiaryQualificationForm.id,
    title: beneficiaryQualificationForm.title,
    description: beneficiaryQualificationForm.description,
    module: FormModule.BENEFICIARY,
    clientTypes: beneficiaryQualificationForm.clientTypes,
    permissions: beneficiaryQualificationForm.permissions,
    dependencies: beneficiaryQualificationForm.dependencies,
    version: beneficiaryQualificationForm.version,
    path: "/beneficiary/qualification",
    icon: "check-circle",
    isActive: true,
  },
  beneficiaryQualificationForm,
);
