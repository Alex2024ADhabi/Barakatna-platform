import {
  ClientType,
  FieldType,
  FormMetadata,
  FormModule,
  FormPermission,
  ValidationRuleType,
} from "../types";
import { formRegistry } from "../registry";

/**
 * Project Completion Form (F06.5)
 * Used to document final project status, beneficiary feedback, and quality assessment
 */
export const projectCompletionForm: FormMetadata = {
  id: "project-completion-form",
  title: "Project Completion",
  description:
    "Document final project status, beneficiary feedback, and quality assessment",
  module: FormModule.PROJECT,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["project-manager", "supervisor", "admin"],
    [FormPermission.CREATE]: ["project-manager", "admin"],
    [FormPermission.EDIT]: ["project-manager", "admin"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["supervisor", "admin"],
    [FormPermission.REJECT]: ["supervisor", "admin"],
    [FormPermission.SUBMIT]: ["project-manager", "admin"],
    [FormPermission.PRINT]: ["project-manager", "supervisor", "admin"],
    [FormPermission.EXPORT]: ["supervisor", "admin"],
  },
  clientTypes: [ClientType.FDF, ClientType.ADHA, ClientType.CASH],
  sections: [
    {
      id: "project-info",
      title: "Project Information",
      description: "Basic information about the project",
      order: 1,
      collapsible: false,
    },
    {
      id: "completion-details",
      title: "Completion Details",
      description: "Details about project completion",
      order: 2,
      collapsible: false,
    },
    {
      id: "budget-summary",
      title: "Budget Summary",
      description: "Summary of project budget and expenses",
      order: 3,
      collapsible: true,
    },
    {
      id: "quality-assessment",
      title: "Quality Assessment",
      description: "Assessment of work quality",
      order: 4,
      collapsible: true,
    },
    {
      id: "beneficiary-feedback",
      title: "Beneficiary Feedback",
      description: "Feedback from the beneficiary",
      order: 5,
      collapsible: true,
    },
    {
      id: "documentation",
      title: "Documentation",
      description: "Final documentation and sign-off",
      order: 6,
      collapsible: true,
    },
  ],
  fields: [
    {
      id: "project-id",
      name: "projectId",
      label: "Project Reference",
      type: FieldType.SELECT,
      required: true,
      section: "project-info",
      order: 1,
      width: "full",
      dataSource: {
        type: "api",
        source: "/api/projects/list",
        valueField: "id",
        labelField: "projectName",
        filters: { status: "in-progress" },
      },
    },
    {
      id: "project-name",
      name: "projectName",
      label: "Project Name",
      type: FieldType.TEXT,
      required: true,
      section: "project-info",
      order: 2,
      width: "full",
      readOnly: true,
      dataSource: {
        type: "api",
        source: "/api/projects/{projectId}/details",
        valueField: "projectName",
        labelField: "projectName",
        dependsOn: ["projectId"],
      },
    },
    {
      id: "beneficiary-id",
      name: "beneficiaryId",
      label: "Beneficiary",
      type: FieldType.TEXT,
      required: true,
      section: "project-info",
      order: 3,
      width: "half",
      readOnly: true,
      dataSource: {
        type: "api",
        source: "/api/projects/{projectId}/beneficiary",
        valueField: "id",
        labelField: "fullName",
        dependsOn: ["projectId"],
      },
    },
    {
      id: "project-manager",
      name: "projectManager",
      label: "Project Manager",
      type: FieldType.TEXT,
      required: true,
      section: "project-info",
      order: 4,
      width: "half",
      readOnly: true,
      dataSource: {
        type: "api",
        source: "/api/projects/{projectId}/manager",
        valueField: "id",
        labelField: "fullName",
        dependsOn: ["projectId"],
      },
    },
    {
      id: "completion-date",
      name: "completionDate",
      label: "Completion Date",
      type: FieldType.DATE,
      required: true,
      section: "completion-details",
      order: 1,
      width: "half",
      defaultValue: new Date().toISOString().split("T")[0],
    },
    {
      id: "project-duration",
      name: "projectDuration",
      label: "Project Duration (days)",
      type: FieldType.CALCULATED,
      required: false,
      section: "completion-details",
      order: 2,
      width: "half",
      readOnly: true,
      calculationFormula: `
        const startDate = new Date(values.projectStartDate);
        const endDate = new Date(values.completionDate);
        const diffTime = Math.abs(endDate - startDate);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
      `,
      dataSource: {
        type: "api",
        source: "/api/projects/{projectId}/details",
        valueField: "startDate",
        labelField: "startDate",
        dependsOn: ["projectId"],
      },
    },
    {
      id: "completion-status",
      name: "completionStatus",
      label: "Completion Status",
      type: FieldType.SELECT,
      required: true,
      section: "completion-details",
      order: 3,
      width: "half",
      options: [
        { value: "completed-on-time", label: "Completed On Time" },
        { value: "completed-early", label: "Completed Early" },
        { value: "completed-with-delay", label: "Completed With Delay" },
        { value: "partially-completed", label: "Partially Completed" },
      ],
    },
    {
      id: "delay-reason",
      name: "delayReason",
      label: "Reason for Delay",
      type: FieldType.TEXTAREA,
      required: false,
      section: "completion-details",
      order: 4,
      width: "half",
      dependencies: [
        {
          type: "visibility",
          sourceField: "completionStatus",
          condition: "value === 'completed-with-delay'",
          action: "visible = true",
        },
        {
          type: "requirement",
          sourceField: "completionStatus",
          condition: "value === 'completed-with-delay'",
          action: "required = true",
        },
      ],
    },
    {
      id: "completion-summary",
      name: "completionSummary",
      label: "Completion Summary",
      type: FieldType.TEXTAREA,
      required: true,
      section: "completion-details",
      order: 5,
      width: "full",
      placeholder: "Provide a summary of the completed project",
    },
    {
      id: "original-budget",
      name: "originalBudget",
      label: "Original Budget (SAR)",
      type: FieldType.NUMBER,
      required: true,
      section: "budget-summary",
      order: 1,
      width: "half",
      readOnly: true,
      dataSource: {
        type: "api",
        source: "/api/projects/{projectId}/budget",
        valueField: "originalBudget",
        labelField: "originalBudget",
        dependsOn: ["projectId"],
      },
    },
    {
      id: "actual-expenses",
      name: "actualExpenses",
      label: "Actual Expenses (SAR)",
      type: FieldType.NUMBER,
      required: true,
      section: "budget-summary",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.MIN_VALUE,
          value: 0,
          message: "Expenses cannot be negative",
        },
      ],
    },
    {
      id: "budget-variance",
      name: "budgetVariance",
      label: "Budget Variance (SAR)",
      type: FieldType.CALCULATED,
      required: false,
      section: "budget-summary",
      order: 3,
      width: "half",
      readOnly: true,
      calculationFormula:
        "return values.originalBudget - values.actualExpenses;",
    },
    {
      id: "variance-percentage",
      name: "variancePercentage",
      label: "Variance Percentage (%)",
      type: FieldType.CALCULATED,
      required: false,
      section: "budget-summary",
      order: 4,
      width: "half",
      readOnly: true,
      calculationFormula: `
        if (values.originalBudget === 0) return 0;
        return ((values.originalBudget - values.actualExpenses) / values.originalBudget * 100).toFixed(2);
      `,
    },
    {
      id: "budget-notes",
      name: "budgetNotes",
      label: "Budget Notes",
      type: FieldType.TEXTAREA,
      required: false,
      section: "budget-summary",
      order: 5,
      width: "full",
      placeholder: "Enter any notes regarding budget and expenses",
    },
    {
      id: "quality-items",
      name: "qualityItems",
      label: "Quality Assessment Items",
      type: FieldType.REPEATER,
      required: true,
      section: "quality-assessment",
      order: 1,
      width: "full",
      fields: [
        {
          id: "assessment-area",
          name: "assessmentArea",
          label: "Assessment Area",
          type: FieldType.SELECT,
          required: true,
          width: "third",
          options: [
            { value: "workmanship", label: "Workmanship" },
            { value: "materials", label: "Materials Quality" },
            { value: "functionality", label: "Functionality" },
            { value: "accessibility", label: "Accessibility" },
            { value: "safety", label: "Safety" },
            { value: "aesthetics", label: "Aesthetics" },
            { value: "durability", label: "Durability" },
          ],
        },
        {
          id: "rating",
          name: "rating",
          label: "Rating",
          type: FieldType.SELECT,
          required: true,
          width: "third",
          options: [
            { value: "5", label: "Excellent (5)" },
            { value: "4", label: "Good (4)" },
            { value: "3", label: "Satisfactory (3)" },
            { value: "2", label: "Fair (2)" },
            { value: "1", label: "Poor (1)" },
          ],
        },
        {
          id: "comments",
          name: "comments",
          label: "Comments",
          type: FieldType.TEXT,
          required: false,
          width: "third",
        },
      ],
    },
    {
      id: "overall-quality-rating",
      name: "overallQualityRating",
      label: "Overall Quality Rating",
      type: FieldType.CALCULATED,
      required: false,
      section: "quality-assessment",
      order: 2,
      width: "half",
      readOnly: true,
      calculationFormula: `
        if (!values.qualityItems || values.qualityItems.length === 0) return 0;
        const sum = values.qualityItems.reduce((total, item) => total + Number(item.rating), 0);
        return (sum / values.qualityItems.length).toFixed(1);
      `,
    },
    {
      id: "quality-notes",
      name: "qualityNotes",
      label: "Quality Assessment Notes",
      type: FieldType.TEXTAREA,
      required: false,
      section: "quality-assessment",
      order: 3,
      width: "full",
      placeholder: "Enter any additional notes about quality assessment",
    },
    {
      id: "beneficiary-satisfaction",
      name: "beneficiarySatisfaction",
      label: "Beneficiary Satisfaction Level",
      type: FieldType.SELECT,
      required: true,
      section: "beneficiary-feedback",
      order: 1,
      width: "half",
      options: [
        { value: "very-satisfied", label: "Very Satisfied" },
        { value: "satisfied", label: "Satisfied" },
        { value: "neutral", label: "Neutral" },
        { value: "dissatisfied", label: "Dissatisfied" },
        { value: "very-dissatisfied", label: "Very Dissatisfied" },
      ],
    },
    {
      id: "beneficiary-comments",
      name: "beneficiaryComments",
      label: "Beneficiary Comments",
      type: FieldType.TEXTAREA,
      required: true,
      section: "beneficiary-feedback",
      order: 2,
      width: "full",
      placeholder: "Enter beneficiary's comments about the completed project",
    },
    {
      id: "improvement-areas",
      name: "improvementAreas",
      label: "Areas for Improvement",
      type: FieldType.TEXTAREA,
      required: false,
      section: "beneficiary-feedback",
      order: 3,
      width: "full",
      placeholder:
        "Note any areas where improvements could be made in future projects",
    },
    {
      id: "completion-photos",
      name: "completionPhotos",
      label: "Completion Photos",
      type: FieldType.IMAGE,
      required: true,
      section: "documentation",
      order: 1,
      width: "full",
      multiple: true,
      helpText: "Upload photos of the completed project (at least 5 photos)",
      validation: [
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: any[]) => value && value.length >= 5,
          message: "At least 5 photos are required",
        },
      ],
    },
    {
      id: "completion-documents",
      name: "completionDocuments",
      label: "Completion Documents",
      type: FieldType.FILE,
      required: false,
      section: "documentation",
      order: 2,
      width: "full",
      multiple: true,
      helpText: "Upload any relevant completion documents",
    },
    {
      id: "project-manager-signature",
      name: "projectManagerSignature",
      label: "Project Manager Signature",
      type: FieldType.SIGNATURE,
      required: true,
      section: "documentation",
      order: 3,
      width: "half",
    },
    {
      id: "beneficiary-signature",
      name: "beneficiarySignature",
      label: "Beneficiary Signature",
      type: FieldType.SIGNATURE,
      required: true,
      section: "documentation",
      order: 4,
      width: "half",
    },
    {
      id: "completion-date-time",
      name: "completionDateTime",
      label: "Completion Form Submission Date/Time",
      type: FieldType.DATETIME,
      required: true,
      section: "documentation",
      order: 5,
      width: "full",
      readOnly: true,
      defaultValue: new Date().toISOString(),
    },
  ],
  dependencies: [
    {
      formId: "project-creation-form",
      description: "Project completion requires an active project",
      type: "prerequisite",
      required: true,
    },
    {
      formId: "room-inspection-form",
      description: "Project completion requires completed room inspections",
      type: "prerequisite",
      required: true,
    },
  ],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

// Register form with the form registry
formRegistry.registerForm(
  {
    id: projectCompletionForm.id,
    title: projectCompletionForm.title,
    description: projectCompletionForm.description,
    module: projectCompletionForm.module,
    clientTypes: projectCompletionForm.clientTypes,
    permissions: projectCompletionForm.permissions,
    dependencies: projectCompletionForm.dependencies,
    version: projectCompletionForm.version,
    path: "/projects/completion",
    icon: "check-square",
    isActive: true,
  },
  projectCompletionForm,
);
