import {
  ClientType,
  FieldType,
  FormMetadata,
  FormModule,
  FormPermission,
  ValidationRuleType,
} from "../types";
import { formRegistry } from "../registry";

/**
 * Client Service Agreement Form (F02.2)
 * Used to create and manage service agreements between the program and client organizations
 */
export const clientServiceAgreementForm: FormMetadata = {
  id: "client-service-agreement-form",
  title: "Client Service Agreement",
  description:
    "Create and manage service agreements between the program and client organizations",
  module: FormModule.CLIENT,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: [
      "admin",
      "manager",
      "client-relationship-manager",
      "financial-officer",
      "legal-officer",
    ],
    [FormPermission.CREATE]: [
      "admin",
      "manager",
      "client-relationship-manager",
    ],
    [FormPermission.EDIT]: ["admin", "manager", "client-relationship-manager"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["admin", "manager", "legal-officer"],
    [FormPermission.REJECT]: ["admin", "manager", "legal-officer"],
    [FormPermission.SUBMIT]: [
      "admin",
      "manager",
      "client-relationship-manager",
    ],
    [FormPermission.PRINT]: [
      "admin",
      "manager",
      "client-relationship-manager",
      "financial-officer",
      "legal-officer",
    ],
    [FormPermission.EXPORT]: ["admin", "manager", "legal-officer"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: [
    {
      id: "agreement-information",
      title: "Agreement Information",
      description: "Basic information about the service agreement",
      order: 1,
      collapsible: false,
    },
    {
      id: "services-scope",
      title: "Services and Scope",
      description: "Details about the services provided and their scope",
      order: 2,
      collapsible: false,
    },
    {
      id: "financial-terms",
      title: "Financial Terms",
      description: "Financial details and payment schedule",
      order: 3,
      collapsible: false,
    },
    {
      id: "obligations-terms",
      title: "Obligations and Terms",
      description: "Obligations of both parties and terms of the agreement",
      order: 4,
      collapsible: false,
    },
    {
      id: "signatory-information",
      title: "Signatory Information",
      description: "Information about the signatories",
      order: 5,
      collapsible: false,
    },
    {
      id: "documentation",
      title: "Documentation",
      description: "Agreement documents",
      order: 6,
      collapsible: false,
    },
  ],
  fields: [
    {
      id: "agreement-id",
      name: "agreementId",
      label: "Agreement ID",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "agreement-information",
      order: 1,
      width: "full",
      helpText: "Auto-generated unique identifier (Format: AGR-YYYY-NNNNN)",
      defaultValue: "",
    },
    {
      id: "client-id",
      name: "clientId",
      label: "Client",
      type: FieldType.LOOKUP,
      required: true,
      section: "agreement-information",
      order: 2,
      width: "full",
      helpText: "Select the client organization",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client is required",
        },
      ],
    },
    {
      id: "client-name",
      name: "clientName",
      label: "Client Name",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "agreement-information",
      order: 3,
      width: "full",
      helpText: "Auto-populated from client record",
    },
    {
      id: "agreement-title",
      name: "agreementTitle",
      label: "Agreement Title",
      type: FieldType.TEXT,
      placeholder: "Enter agreement title",
      required: true,
      section: "agreement-information",
      order: 4,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Agreement title is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 5,
          message: "Agreement title must be at least 5 characters",
        },
      ],
    },
    {
      id: "agreement-type",
      name: "agreementType",
      label: "Agreement Type",
      type: FieldType.SELECT,
      required: true,
      section: "agreement-information",
      order: 5,
      width: "full",
      options: [
        { value: "Service Agreement", label: "Service Agreement" },
        {
          value: "Memorandum of Understanding",
          label: "Memorandum of Understanding",
        },
        { value: "Partnership Agreement", label: "Partnership Agreement" },
        { value: "Grant Agreement", label: "Grant Agreement" },
        { value: "Sponsorship Agreement", label: "Sponsorship Agreement" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "start-date",
      name: "startDate",
      label: "Start Date",
      type: FieldType.DATE,
      required: true,
      section: "agreement-information",
      order: 6,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Start date is required",
        },
      ],
    },
    {
      id: "end-date",
      name: "endDate",
      label: "End Date",
      type: FieldType.DATE,
      required: true,
      section: "agreement-information",
      order: 7,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "End date is required",
        },
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string, formValues: any) => {
            const endDate = new Date(value);
            const startDate = new Date(formValues.startDate);
            return endDate > startDate;
          },
          message: "End date must be after start date",
        },
      ],
    },
    {
      id: "service-description",
      name: "serviceDescription",
      label: "Service Description",
      type: FieldType.TEXTAREA,
      placeholder: "Enter detailed description of services",
      required: true,
      section: "services-scope",
      order: 1,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Service description is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 100,
          message: "Service description must be at least 100 characters",
        },
      ],
    },
    {
      id: "service-categories",
      name: "serviceCategories",
      label: "Service Categories",
      type: FieldType.MULTISELECT,
      required: true,
      section: "services-scope",
      order: 2,
      width: "full",
      options: [
        { value: "Housing Modification", label: "Housing Modification" },
        { value: "Home Safety Assessment", label: "Home Safety Assessment" },
        { value: "Mental Health Support", label: "Mental Health Support" },
        { value: "Social Support Services", label: "Social Support Services" },
        { value: "Healthcare Services", label: "Healthcare Services" },
        { value: "Mobility Support", label: "Mobility Support" },
        { value: "Training and Education", label: "Training and Education" },
        { value: "Other", label: "Other" },
      ],
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "At least one service category must be selected",
        },
      ],
    },
    {
      id: "beneficiary-count",
      name: "beneficiaryCount",
      label: "Number of Beneficiaries",
      type: FieldType.NUMBER,
      required: true,
      section: "services-scope",
      order: 3,
      width: "full",
      defaultValue: 1,
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Number of beneficiaries is required",
        },
        {
          type: ValidationRuleType.MIN_VALUE,
          value: 1,
          message: "Number of beneficiaries must be at least 1",
        },
      ],
    },
    {
      id: "total-agreement-value",
      name: "totalAgreementValue",
      label: "Total Agreement Value (AED)",
      type: FieldType.NUMBER,
      required: true,
      section: "financial-terms",
      order: 1,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Total agreement value is required",
        },
        {
          type: ValidationRuleType.MIN_VALUE,
          value: 0,
          message: "Total agreement value cannot be negative",
        },
      ],
    },
    {
      id: "payment-terms",
      name: "paymentTerms",
      label: "Payment Terms",
      type: FieldType.SELECT,
      required: true,
      section: "financial-terms",
      order: 2,
      width: "full",
      options: [
        { value: "Advance Payment", label: "Advance Payment" },
        { value: "Milestone-based Payment", label: "Milestone-based Payment" },
        { value: "Monthly Payment", label: "Monthly Payment" },
        { value: "Quarterly Payment", label: "Quarterly Payment" },
        { value: "Annual Payment", label: "Annual Payment" },
        { value: "Upon Completion", label: "Upon Completion" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "payment-schedule",
      name: "paymentSchedule",
      label: "Payment Schedule",
      type: FieldType.REPEATER,
      required: true,
      section: "financial-terms",
      order: 3,
      width: "full",
      helpText: "Add payment installments",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "At least one payment installment is required",
        },
      ],
      fields: [
        {
          name: "installmentNumber",
          label: "Installment Number",
          type: FieldType.NUMBER,
          required: true,
          width: "quarter",
        },
        {
          name: "amount",
          label: "Amount (AED)",
          type: FieldType.NUMBER,
          required: true,
          width: "quarter",
        },
        {
          name: "dueDate",
          label: "Due Date",
          type: FieldType.DATE,
          required: true,
          width: "quarter",
        },
        {
          name: "description",
          label: "Description",
          type: FieldType.TEXT,
          required: true,
          width: "quarter",
        },
      ],
    },
    {
      id: "key-deliverables",
      name: "keyDeliverables",
      label: "Key Deliverables",
      type: FieldType.REPEATER,
      required: true,
      section: "services-scope",
      order: 4,
      width: "full",
      helpText: "Add key deliverables",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "At least one key deliverable is required",
        },
      ],
      fields: [
        {
          name: "deliverableNumber",
          label: "Deliverable Number",
          type: FieldType.NUMBER,
          required: true,
          width: "quarter",
        },
        {
          name: "description",
          label: "Description",
          type: FieldType.TEXT,
          required: true,
          width: "quarter",
        },
        {
          name: "dueDate",
          label: "Due Date",
          type: FieldType.DATE,
          required: true,
          width: "quarter",
        },
        {
          name: "acceptanceCriteria",
          label: "Acceptance Criteria",
          type: FieldType.TEXT,
          required: true,
          width: "quarter",
        },
      ],
    },
    {
      id: "special-terms",
      name: "specialTerms",
      label: "Special Terms",
      type: FieldType.TEXTAREA,
      placeholder: "Enter any special terms or conditions",
      required: false,
      section: "obligations-terms",
      order: 1,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 1000,
          message: "Special terms cannot exceed 1000 characters",
        },
      ],
    },
    {
      id: "client-obligations",
      name: "clientObligations",
      label: "Client Obligations",
      type: FieldType.TEXTAREA,
      placeholder: "Enter client responsibilities",
      required: true,
      section: "obligations-terms",
      order: 2,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client obligations are required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 50,
          message: "Client obligations must be at least 50 characters",
        },
      ],
    },
    {
      id: "provider-obligations",
      name: "providerObligations",
      label: "Provider Obligations",
      type: FieldType.TEXTAREA,
      placeholder: "Enter provider responsibilities",
      required: true,
      section: "obligations-terms",
      order: 3,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Provider obligations are required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 50,
          message: "Provider obligations must be at least 50 characters",
        },
      ],
    },
    {
      id: "termination-conditions",
      name: "terminationConditions",
      label: "Termination Conditions",
      type: FieldType.TEXTAREA,
      placeholder: "Enter conditions for termination",
      required: true,
      section: "obligations-terms",
      order: 4,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Termination conditions are required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 50,
          message: "Termination conditions must be at least 50 characters",
        },
      ],
    },
    {
      id: "confidentiality-terms",
      name: "confidentialityTerms",
      label: "Confidentiality Terms",
      type: FieldType.TEXTAREA,
      placeholder: "Enter confidentiality requirements",
      required: true,
      section: "obligations-terms",
      order: 5,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Confidentiality terms are required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 50,
          message: "Confidentiality terms must be at least 50 characters",
        },
      ],
    },
    {
      id: "client-signatory-name",
      name: "clientSignatoryName",
      label: "Client Signatory Name",
      type: FieldType.TEXT,
      placeholder: "Enter full name",
      required: true,
      section: "signatory-information",
      order: 1,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client signatory name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Name must be at least 3 characters",
        },
      ],
    },
    {
      id: "client-signatory-position",
      name: "clientSignatoryPosition",
      label: "Client Signatory Position",
      type: FieldType.TEXT,
      placeholder: "Enter position",
      required: true,
      section: "signatory-information",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client signatory position is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Position must be at least 3 characters",
        },
      ],
    },
    {
      id: "client-signature",
      name: "clientSignature",
      label: "Client Signature",
      type: FieldType.SIGNATURE,
      required: true,
      section: "signatory-information",
      order: 3,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client signature is required",
        },
      ],
    },
    {
      id: "client-signature-date",
      name: "clientSignatureDate",
      label: "Client Signature Date",
      type: FieldType.DATE,
      required: true,
      section: "signatory-information",
      order: 4,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client signature date is required",
        },
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const signDate = new Date(value);
            const today = new Date();
            return signDate <= today;
          },
          message: "Signature date cannot be in the future",
        },
      ],
    },
    {
      id: "provider-signatory-name",
      name: "providerSignatoryName",
      label: "Provider Signatory Name",
      type: FieldType.TEXT,
      placeholder: "Enter full name",
      required: true,
      section: "signatory-information",
      order: 5,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Provider signatory name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Name must be at least 3 characters",
        },
      ],
    },
    {
      id: "provider-signatory-position",
      name: "providerSignatoryPosition",
      label: "Provider Signatory Position",
      type: FieldType.TEXT,
      placeholder: "Enter position",
      required: true,
      section: "signatory-information",
      order: 6,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Provider signatory position is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Position must be at least 3 characters",
        },
      ],
    },
    {
      id: "provider-signature",
      name: "providerSignature",
      label: "Provider Signature",
      type: FieldType.SIGNATURE,
      required: true,
      section: "signatory-information",
      order: 7,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Provider signature is required",
        },
      ],
    },
    {
      id: "provider-signature-date",
      name: "providerSignatureDate",
      label: "Provider Signature Date",
      type: FieldType.DATE,
      required: true,
      section: "signatory-information",
      order: 8,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Provider signature date is required",
        },
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const signDate = new Date(value);
            const today = new Date();
            return signDate <= today;
          },
          message: "Signature date cannot be in the future",
        },
      ],
    },
    {
      id: "agreement-status",
      name: "agreementStatus",
      label: "Agreement Status",
      type: FieldType.SELECT,
      required: true,
      section: "documentation",
      order: 1,
      width: "full",
      defaultValue: "Draft",
      options: [
        { value: "Draft", label: "Draft" },
        { value: "Under Review", label: "Under Review" },
        { value: "Client Approved", label: "Client Approved" },
        { value: "Internal Approval", label: "Internal Approval" },
        { value: "Active", label: "Active" },
        { value: "Expired", label: "Expired" },
        { value: "Terminated", label: "Terminated" },
        { value: "Completed", label: "Completed" },
      ],
    },
    {
      id: "agreement-document",
      name: "agreementDocument",
      label: "Agreement Document",
      type: FieldType.FILE,
      required: true,
      section: "documentation",
      order: 2,
      width: "full",
      helpText: "Upload the final agreement document (PDF format)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Agreement document is required",
        },
      ],
    },
  ],
  dependencies: [
    {
      formId: "client-profile-form",
      description: "Requires client profile data",
      type: "prerequisite",
      required: true,
      fieldMappings: [
        {
          sourceField: "clientId",
          targetField: "clientId",
          description: "Maps client ID from profile to agreement",
        },
        {
          sourceField: "organizationNameEn",
          targetField: "clientName",
          description: "Maps organization name to client name in agreement",
        },
      ],
    },
  ],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

// Register form with the form registry
formRegistry.registerForm(
  {
    id: clientServiceAgreementForm.id,
    title: clientServiceAgreementForm.title,
    description: clientServiceAgreementForm.description,
    module: FormModule.CLIENT,
    clientTypes: clientServiceAgreementForm.clientTypes,
    permissions: clientServiceAgreementForm.permissions,
    dependencies: clientServiceAgreementForm.dependencies,
    version: clientServiceAgreementForm.version,
    path: "/client/service-agreement",
    icon: "file-contract",
    isActive: true,
  },
  clientServiceAgreementForm,
);
