import {
  ClientType,
  FieldType,
  FormMetadata,
  FormModule,
  FormPermission,
  ValidationRuleType,
} from "../types";
import { formRegistry } from "../registry";

/**
 * Client Feedback Form (F02.3)
 * Used to collect and manage feedback from client organizations about services provided
 */
export const clientFeedbackForm: FormMetadata = {
  id: "client-feedback-form",
  title: "Client Feedback",
  description:
    "Collect and manage feedback from client organizations about services provided",
  module: FormModule.CLIENT,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: [
      "admin",
      "manager",
      "client-relationship-manager",
      "quality-assurance-specialist",
    ],
    [FormPermission.CREATE]: [
      "admin",
      "manager",
      "client-relationship-manager",
    ],
    [FormPermission.EDIT]: ["admin", "manager", "client-relationship-manager"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["admin", "manager"],
    [FormPermission.REJECT]: ["admin", "manager"],
    [FormPermission.SUBMIT]: [
      "admin",
      "manager",
      "client-relationship-manager",
    ],
    [FormPermission.PRINT]: [
      "admin",
      "manager",
      "client-relationship-manager",
      "quality-assurance-specialist",
    ],
    [FormPermission.EXPORT]: ["admin", "manager"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: [
    {
      id: "client-information",
      title: "Client Information",
      description: "Information about the client providing feedback",
      order: 1,
      collapsible: false,
    },
    {
      id: "respondent-information",
      title: "Respondent Information",
      description: "Information about the person providing feedback",
      order: 2,
      collapsible: false,
    },
    {
      id: "service-ratings",
      title: "Service Ratings",
      description: "Ratings for various aspects of service",
      order: 3,
      collapsible: false,
    },
    {
      id: "feedback-content",
      title: "Feedback Content",
      description: "Detailed feedback and comments",
      order: 4,
      collapsible: false,
    },
    {
      id: "follow-up-information",
      title: "Follow-up Information",
      description: "Information for follow-up actions",
      order: 5,
      collapsible: false,
    },
  ],
  fields: [
    {
      id: "feedback-id",
      name: "feedbackId",
      label: "Feedback ID",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "client-information",
      order: 1,
      width: "full",
      helpText: "Auto-generated unique identifier (Format: FDB-YYYY-NNNNN)",
      defaultValue: "",
    },
    {
      id: "client-id",
      name: "clientId",
      label: "Client",
      type: FieldType.LOOKUP,
      required: true,
      section: "client-information",
      order: 2,
      width: "full",
      helpText: "Select the client organization",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Client is required",
        },
      ],
    },
    {
      id: "client-name",
      name: "clientName",
      label: "Client Name",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "client-information",
      order: 3,
      width: "full",
      helpText: "Auto-populated from client record",
    },
    {
      id: "agreement-id",
      name: "agreementId",
      label: "Service Agreement",
      type: FieldType.LOOKUP,
      required: true,
      section: "client-information",
      order: 4,
      width: "full",
      helpText: "Select the service agreement this feedback relates to",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Service agreement is required",
        },
      ],
    },
    {
      id: "feedback-date",
      name: "feedbackDate",
      label: "Feedback Date",
      type: FieldType.DATE,
      required: true,
      section: "client-information",
      order: 5,
      width: "full",
      defaultValue: new Date().toISOString().split("T")[0],
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Feedback date is required",
        },
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const feedbackDate = new Date(value);
            const today = new Date();
            return feedbackDate <= today;
          },
          message: "Feedback date cannot be in the future",
        },
      ],
    },
    {
      id: "respondent-name",
      name: "respondentName",
      label: "Respondent Name",
      type: FieldType.TEXT,
      placeholder: "Enter full name",
      required: true,
      section: "respondent-information",
      order: 1,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Respondent name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Name must be at least 3 characters",
        },
      ],
    },
    {
      id: "respondent-position",
      name: "respondentPosition",
      label: "Respondent Position",
      type: FieldType.TEXT,
      placeholder: "Enter position",
      required: true,
      section: "respondent-information",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Respondent position is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Position must be at least 3 characters",
        },
      ],
    },
    {
      id: "respondent-email",
      name: "respondentEmail",
      label: "Respondent Email",
      type: FieldType.EMAIL,
      placeholder: "Enter email address",
      required: true,
      section: "respondent-information",
      order: 3,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Respondent email is required",
        },
        {
          type: ValidationRuleType.EMAIL,
          message: "Please enter a valid email address",
        },
      ],
    },
    {
      id: "respondent-phone",
      name: "respondentPhone",
      label: "Respondent Phone",
      type: FieldType.PHONE,
      placeholder: "+971 XX XXX XXXX",
      required: true,
      section: "respondent-information",
      order: 4,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Respondent phone is required",
        },
        {
          type: ValidationRuleType.PATTERN,
          value: "^\\+971\\s?\\d{2}\\s?\\d{3}\\s?\\d{4}$",
          message: "Please enter a valid UAE phone number format",
        },
      ],
    },
    {
      id: "service-quality-rating",
      name: "serviceQualityRating",
      label: "Service Quality Rating",
      type: FieldType.RATING,
      required: true,
      section: "service-ratings",
      order: 1,
      width: "full",
      helpText: "Rate the overall quality of service (1-5)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Service quality rating is required",
        },
      ],
    },
    {
      id: "timeliness-rating",
      name: "timelinessRating",
      label: "Timeliness Rating",
      type: FieldType.RATING,
      required: true,
      section: "service-ratings",
      order: 2,
      width: "full",
      helpText: "Rate the timeliness of service delivery (1-5)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Timeliness rating is required",
        },
      ],
    },
    {
      id: "communication-rating",
      name: "communicationRating",
      label: "Communication Rating",
      type: FieldType.RATING,
      required: true,
      section: "service-ratings",
      order: 3,
      width: "full",
      helpText: "Rate the quality of communication (1-5)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Communication rating is required",
        },
      ],
    },
    {
      id: "staff-professionalism-rating",
      name: "staffProfessionalismRating",
      label: "Staff Professionalism Rating",
      type: FieldType.RATING,
      required: true,
      section: "service-ratings",
      order: 4,
      width: "full",
      helpText: "Rate the professionalism of staff (1-5)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Staff professionalism rating is required",
        },
      ],
    },
    {
      id: "value-for-money-rating",
      name: "valueForMoneyRating",
      label: "Value for Money Rating",
      type: FieldType.RATING,
      required: true,
      section: "service-ratings",
      order: 5,
      width: "full",
      helpText: "Rate the value received for money spent (1-5)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Value for money rating is required",
        },
      ],
    },
    {
      id: "overall-satisfaction-rating",
      name: "overallSatisfactionRating",
      label: "Overall Satisfaction Rating",
      type: FieldType.RATING,
      required: true,
      section: "service-ratings",
      order: 6,
      width: "full",
      helpText: "Rate your overall satisfaction with the service (1-5)",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Overall satisfaction rating is required",
        },
      ],
    },
    {
      id: "strengths",
      name: "strengths",
      label: "Strengths",
      type: FieldType.TEXTAREA,
      placeholder: "Enter perceived strengths of the service",
      required: false,
      section: "feedback-content",
      order: 1,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Strengths cannot exceed 500 characters",
        },
      ],
    },
    {
      id: "areas-for-improvement",
      name: "areasForImprovement",
      label: "Areas for Improvement",
      type: FieldType.TEXTAREA,
      placeholder: "Enter suggested areas for improvement",
      required: false,
      section: "feedback-content",
      order: 2,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Areas for improvement cannot exceed 500 characters",
        },
      ],
    },
    {
      id: "specific-issues",
      name: "specificIssues",
      label: "Specific Issues",
      type: FieldType.TEXTAREA,
      placeholder: "Enter description of specific issues encountered",
      required: false,
      section: "feedback-content",
      order: 3,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Specific issues cannot exceed 500 characters",
        },
      ],
    },
    {
      id: "improvement-suggestions",
      name: "improvementSuggestions",
      label: "Improvement Suggestions",
      type: FieldType.TEXTAREA,
      placeholder: "Enter suggestions for improvement",
      required: false,
      section: "feedback-content",
      order: 4,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Improvement suggestions cannot exceed 500 characters",
        },
      ],
    },
    {
      id: "additional-services-needed",
      name: "additionalServicesNeeded",
      label: "Additional Services Needed",
      type: FieldType.TEXTAREA,
      placeholder: "Enter any additional services required",
      required: false,
      section: "feedback-content",
      order: 5,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 500,
          message: "Additional services needed cannot exceed 500 characters",
        },
      ],
    },
    {
      id: "recommendation-likelihood",
      name: "recommendationLikelihood",
      label: "Recommendation Likelihood",
      type: FieldType.RATING,
      required: true,
      section: "feedback-content",
      order: 6,
      width: "full",
      helpText: "How likely are you to recommend our services (1-10)",
      maxRating: 10,
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Recommendation likelihood is required",
        },
      ],
    },
    {
      id: "additional-comments",
      name: "additionalComments",
      label: "Additional Comments",
      type: FieldType.TEXTAREA,
      placeholder: "Enter any additional comments",
      required: false,
      section: "feedback-content",
      order: 7,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 1000,
          message: "Additional comments cannot exceed 1000 characters",
        },
      ],
    },
    {
      id: "response-required",
      name: "responseRequired",
      label: "Response Required",
      type: FieldType.CHECKBOX,
      required: true,
      section: "follow-up-information",
      order: 1,
      width: "full",
      defaultValue: false,
      helpText: "Indicates if a response to this feedback is required",
    },
    {
      id: "followup-contact-preference",
      name: "followupContactPreference",
      label: "Follow-up Contact Preference",
      type: FieldType.SELECT,
      required: true,
      section: "follow-up-information",
      order: 2,
      width: "full",
      options: [
        { value: "Email", label: "Email" },
        { value: "Phone", label: "Phone" },
        { value: "In-person Meeting", label: "In-person Meeting" },
        { value: "No Follow-up Needed", label: "No Follow-up Needed" },
      ],
    },
    {
      id: "feedback-category",
      name: "feedbackCategory",
      label: "Feedback Category",
      type: FieldType.SELECT,
      required: true,
      section: "follow-up-information",
      order: 3,
      width: "half",
      options: [
        { value: "General Feedback", label: "General Feedback" },
        { value: "Service Quality", label: "Service Quality" },
        { value: "Staff Behavior", label: "Staff Behavior" },
        { value: "Process Improvement", label: "Process Improvement" },
        { value: "Technical Issue", label: "Technical Issue" },
        { value: "Billing/Financial", label: "Billing/Financial" },
        { value: "Partnership Opportunity", label: "Partnership Opportunity" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "feedback-priority",
      name: "feedbackPriority",
      label: "Feedback Priority",
      type: FieldType.SELECT,
      required: true,
      section: "follow-up-information",
      order: 4,
      width: "half",
      defaultValue: "Medium",
      options: [
        { value: "Critical", label: "Critical" },
        { value: "High", label: "High" },
        { value: "Medium", label: "Medium" },
        { value: "Low", label: "Low" },
      ],
    },
    {
      id: "feedback-status",
      name: "feedbackStatus",
      label: "Feedback Status",
      type: FieldType.SELECT,
      required: true,
      section: "follow-up-information",
      order: 5,
      width: "full",
      defaultValue: "New",
      options: [
        { value: "New", label: "New" },
        { value: "In Review", label: "In Review" },
        { value: "Assigned", label: "Assigned" },
        { value: "In Progress", label: "In Progress" },
        { value: "Responded", label: "Responded" },
        { value: "Closed", label: "Closed" },
        { value: "Reopened", label: "Reopened" },
      ],
    },
    {
      id: "assigned-to",
      name: "assignedTo",
      label: "Assigned To",
      type: FieldType.LOOKUP,
      required: false,
      section: "follow-up-information",
      order: 6,
      width: "full",
      helpText: "Select the user assigned for follow-up",
    },
    {
      id: "response-text",
      name: "responseText",
      label: "Response Text",
      type: FieldType.TEXTAREA,
      placeholder: "Enter response to feedback",
      required: false,
      section: "follow-up-information",
      order: 7,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.MAX_LENGTH,
          value: 1000,
          message: "Response text cannot exceed 1000 characters",
        },
      ],
    },
    {
      id: "response-date",
      name: "responseDate",
      label: "Response Date",
      type: FieldType.DATE,
      required: false,
      section: "follow-up-information",
      order: 8,
      width: "half",
    },
    {
      id: "response-sent",
      name: "responseSent",
      label: "Response Sent",
      type: FieldType.CHECKBOX,
      required: false,
      section: "follow-up-information",
      order: 9,
      width: "half",
      defaultValue: false,
    },
  ],
  dependencies: [
    {
      formId: "client-profile-form",
      description: "Requires client profile data",
      type: "prerequisite",
      required: true,
      fieldMappings: [
        {
          sourceField: "clientId",
          targetField: "clientId",
          description: "Maps client ID from profile to feedback",
        },
        {
          sourceField: "organizationNameEn",
          targetField: "clientName",
          description: "Maps organization name to client name in feedback",
        },
      ],
    },
    {
      formId: "client-service-agreement-form",
      description: "Requires service agreement data",
      type: "prerequisite",
      required: true,
      fieldMappings: [
        {
          sourceField: "agreementId",
          targetField: "agreementId",
          description: "Maps agreement ID to feedback",
        },
      ],
    },
  ],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

// Register form with the form registry
export function registerclientFeedbackForm() {
  formRegistry.registerForm(
    {
      id: clientFeedbackForm.id,
      title: clientFeedbackForm.title,
      description: clientFeedbackForm.description,
      module: FormModule.CLIENT,
      clientTypes: clientFeedbackForm.clientTypes,
      permissions: clientFeedbackForm.permissions,
      dependencies: clientFeedbackForm.dependencies,
      version: clientFeedbackForm.version,
      path: "/client/feedback",
      icon: "message-square",
      isActive: true,
    },
    clientFeedbackForm,
  );

}
