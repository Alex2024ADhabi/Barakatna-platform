import { formRegistry } from "../registry";
import {
  ClientType,
  FieldType,
  FormField,
  FormMetadata,
  FormModule,
  FormPermission,
  FormRegistryEntry,
  FormSection,
  ValidationRuleType,
} from "../types";

// Inventory Item Form
const inventoryItemFormFields: FormField[] = [
  {
    id: "itemCode",
    name: "itemCode",
    label: "Item Code",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Item code is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "itemName",
    name: "itemName",
    label: "Item Name",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Item name is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "description",
    name: "description",
    label: "Description",
    type: FieldType.TEXTAREA,
    placeholder: "Enter item description",
    section: "basicInfo",
    order: 3,
  },
  {
    id: "categoryId",
    name: "categoryId",
    label: "Category",
    type: FieldType.SELECT,
    required: true,
    dataSource: {
      type: "api",
      source: "/api/inventory/categories",
      valueField: "id",
      labelField: "name",
    },
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Category is required",
      },
    ],
    section: "basicInfo",
    order: 4,
  },
  {
    id: "unitOfMeasure",
    name: "unitOfMeasure",
    label: "Unit of Measure",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "each", label: "Each" },
      { value: "box", label: "Box" },
      { value: "kg", label: "Kilogram" },
      { value: "g", label: "Gram" },
      { value: "l", label: "Liter" },
      { value: "ml", label: "Milliliter" },
      { value: "m", label: "Meter" },
      { value: "cm", label: "Centimeter" },
      { value: "sqm", label: "Square Meter" },
      { value: "pack", label: "Pack" },
      { value: "set", label: "Set" },
      { value: "other", label: "Other" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Unit of measure is required",
      },
    ],
    section: "basicInfo",
    order: 5,
  },
  {
    id: "currentStock",
    name: "currentStock",
    label: "Current Stock",
    type: FieldType.NUMBER,
    required: true,
    defaultValue: 0,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Current stock is required",
      },
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0,
        message: "Current stock cannot be negative",
      },
    ],
    section: "stockInfo",
    order: 1,
  },
  {
    id: "minimumStock",
    name: "minimumStock",
    label: "Minimum Stock Level",
    type: FieldType.NUMBER,
    required: true,
    defaultValue: 0,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Minimum stock level is required",
      },
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0,
        message: "Minimum stock level cannot be negative",
      },
    ],
    section: "stockInfo",
    order: 2,
  },
  {
    id: "maximumStock",
    name: "maximumStock",
    label: "Maximum Stock Level",
    type: FieldType.NUMBER,
    defaultValue: 0,
    validation: [
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0,
        message: "Maximum stock level cannot be negative",
      },
    ],
    section: "stockInfo",
    order: 3,
  },
  {
    id: "reorderPoint",
    name: "reorderPoint",
    label: "Reorder Point",
    type: FieldType.NUMBER,
    defaultValue: 0,
    validation: [
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0,
        message: "Reorder point cannot be negative",
      },
    ],
    section: "stockInfo",
    order: 4,
  },
  {
    id: "locationId",
    name: "locationId",
    label: "Storage Location",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/inventory/locations",
      valueField: "id",
      labelField: "name",
    },
    section: "stockInfo",
    order: 5,
  },
  {
    id: "unitCost",
    name: "unitCost",
    label: "Unit Cost",
    type: FieldType.NUMBER,
    validation: [
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0,
        message: "Unit cost cannot be negative",
      },
    ],
    section: "costInfo",
    order: 1,
  },
  {
    id: "totalValue",
    name: "totalValue",
    label: "Total Value",
    type: FieldType.CALCULATED,
    calculationFormula: "currentStock * unitCost",
    readOnly: true,
    section: "costInfo",
    order: 2,
  },
  {
    id: "supplierId",
    name: "supplierId",
    label: "Primary Supplier",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/suppliers",
      valueField: "id",
      labelField: "name",
    },
    section: "costInfo",
    order: 3,
  },
  {
    id: "itemImage",
    name: "itemImage",
    label: "Item Image",
    type: FieldType.IMAGE,
    section: "additionalInfo",
    order: 1,
  },
  {
    id: "notes",
    name: "notes",
    label: "Notes",
    type: FieldType.TEXTAREA,
    placeholder: "Enter any additional notes",
    section: "additionalInfo",
    order: 2,
  },
  {
    id: "isActive",
    name: "isActive",
    label: "Active",
    type: FieldType.CHECKBOX,
    defaultValue: true,
    section: "additionalInfo",
    order: 3,
  },
];

const inventoryItemSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic item information",
    order: 1,
  },
  {
    id: "stockInfo",
    title: "Stock Information",
    description: "Enter stock levels and location",
    order: 2,
  },
  {
    id: "costInfo",
    title: "Cost Information",
    description: "Enter cost and supplier information",
    order: 3,
  },
  {
    id: "additionalInfo",
    title: "Additional Information",
    description: "Add image and notes",
    order: 4,
  },
];

const inventoryItemMetadata: FormMetadata = {
  id: "inventory-item-form",
  title: "Inventory Item Form",
  description: "Form for managing inventory items",
  module: FormModule.INVENTORY,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.CREATE]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.EDIT]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.DELETE]: ["inventory_manager", "admin"],
    [FormPermission.APPROVE]: ["inventory_manager", "admin"],
    [FormPermission.REJECT]: ["inventory_manager", "admin"],
    [FormPermission.SUBMIT]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.PRINT]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.EXPORT]: ["inventory_manager", "admin"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: inventoryItemSections,
  fields: inventoryItemFormFields,
  dependencies: [],
  workflow: "",
  submitEndpoint: "/api/inventory/items",
  fetchDataEndpoint: "/api/inventory/items/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const inventoryItemEntry: FormRegistryEntry = {
  id: "inventory-item-form",
  title: "Inventory Item Form",
  description: "Form for managing inventory items",
  module: FormModule.INVENTORY,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: inventoryItemMetadata.permissions,
  dependencies: inventoryItemMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/inventory/items",
  icon: "Package",
  isActive: true,
};

// Stock Transaction Form
const stockTransactionFormFields: FormField[] = [
  {
    id: "transactionType",
    name: "transactionType",
    label: "Transaction Type",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "receipt", label: "Stock Receipt" },
      { value: "issue", label: "Stock Issue" },
      { value: "transfer", label: "Stock Transfer" },
      { value: "adjustment", label: "Stock Adjustment" },
      { value: "return", label: "Stock Return" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Transaction type is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "transactionDate",
    name: "transactionDate",
    label: "Transaction Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Transaction date is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "referenceNumber",
    name: "referenceNumber",
    label: "Reference Number",
    type: FieldType.TEXT,
    placeholder: "e.g., PO number, requisition number",
    section: "basicInfo",
    order: 3,
  },
  {
    id: "sourceLocationId",
    name: "sourceLocationId",
    label: "Source Location",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/inventory/locations",
      valueField: "id",
      labelField: "name",
    },
    conditional: {
      field: "transactionType",
      operator: "in",
      value: ["issue", "transfer"],
    },
    section: "locationInfo",
    order: 1,
  },
  {
    id: "destinationLocationId",
    name: "destinationLocationId",
    label: "Destination Location",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/inventory/locations",
      valueField: "id",
      labelField: "name",
    },
    conditional: {
      field: "transactionType",
      operator: "in",
      value: ["receipt", "transfer"],
    },
    section: "locationInfo",
    order: 2,
  },
  {
    id: "supplierId",
    name: "supplierId",
    label: "Supplier",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/suppliers",
      valueField: "id",
      labelField: "name",
    },
    conditional: {
      field: "transactionType",
      operator: "==",
      value: "receipt",
    },
    section: "locationInfo",
    order: 3,
  },
  {
    id: "projectId",
    name: "projectId",
    label: "Project",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/projects",
      valueField: "id",
      labelField: "name",
    },
    conditional: {
      field: "transactionType",
      operator: "==",
      value: "issue",
    },
    section: "locationInfo",
    order: 4,
  },
  {
    id: "transactionItems",
    name: "transactionItems",
    label: "Transaction Items",
    type: FieldType.REPEATER,
    required: true,
    section: "itemDetails",
    order: 1,
    defaultValue: [
      {
        itemId: "",
        quantity: 1,
        unitCost: 0,
        totalCost: 0,
        notes: "",
      },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "At least one item is required",
      },
    ],
  },
  {
    id: "totalQuantity",
    name: "totalQuantity",
    label: "Total Quantity",
    type: FieldType.CALCULATED,
    calculationFormula: "sum(transactionItems.*.quantity)",
    readOnly: true,
    section: "itemDetails",
    order: 2,
  },
  {
    id: "totalCost",
    name: "totalCost",
    label: "Total Cost",
    type: FieldType.CALCULATED,
    calculationFormula: "sum(transactionItems.*.totalCost)",
    readOnly: true,
    section: "itemDetails",
    order: 3,
  },
  {
    id: "reason",
    name: "reason",
    label: "Reason",
    type: FieldType.TEXTAREA,
    placeholder: "Enter reason for transaction",
    conditional: {
      field: "transactionType",
      operator: "in",
      value: ["adjustment", "return"],
    },
    section: "additionalInfo",
    order: 1,
  },
  {
    id: "notes",
    name: "notes",
    label: "Notes",
    type: FieldType.TEXTAREA,
    placeholder: "Enter any additional notes",
    section: "additionalInfo",
    order: 2,
  },
  {
    id: "attachments",
    name: "attachments",
    label: "Supporting Documents",
    type: FieldType.FILE,
    section: "additionalInfo",
    order: 3,
  },
];

const stockTransactionSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic transaction information",
    order: 1,
  },
  {
    id: "locationInfo",
    title: "Location Information",
    description: "Enter source and destination locations",
    order: 2,
  },
  {
    id: "itemDetails",
    title: "Item Details",
    description: "Enter items and quantities",
    order: 3,
  },
  {
    id: "additionalInfo",
    title: "Additional Information",
    description: "Add notes and supporting documents",
    order: 4,
  },
];

const stockTransactionMetadata: FormMetadata = {
  id: "stock-transaction-form",
  title: "Stock Transaction Form",
  description: "Form for recording inventory transactions",
  module: FormModule.INVENTORY,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.CREATE]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.EDIT]: ["inventory_manager", "admin"],
    [FormPermission.DELETE]: ["inventory_manager", "admin"],
    [FormPermission.APPROVE]: ["inventory_manager", "admin"],
    [FormPermission.REJECT]: ["inventory_manager", "admin"],
    [FormPermission.SUBMIT]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.PRINT]: ["inventory_manager", "admin", "inventory_staff"],
    [FormPermission.EXPORT]: ["inventory_manager", "admin"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: stockTransactionSections,
  fields: stockTransactionFormFields,
  dependencies: [
    {
      formId: "inventory-item-form",
      description: "Inventory items must exist before transactions",
      type: "prerequisite",
      required: true,
    },
  ],
  workflow: "inventory-transaction-workflow",
  submitEndpoint: "/api/inventory/transactions",
  fetchDataEndpoint: "/api/inventory/transactions/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const stockTransactionEntry: FormRegistryEntry = {
  id: "stock-transaction-form",
  title: "Stock Transaction Form",
  description: "Form for recording inventory transactions",
  module: FormModule.INVENTORY,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: stockTransactionMetadata.permissions,
  dependencies: stockTransactionMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/inventory/transactions",
  icon: "RefreshCw",
  isActive: true,
};

// Register all forms
formRegistry.registerForm(inventoryItemEntry, inventoryItemMetadata);
formRegistry.registerForm(stockTransactionEntry, stockTransactionMetadata);
