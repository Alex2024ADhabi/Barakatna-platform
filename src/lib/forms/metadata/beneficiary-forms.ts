import {
  ClientType,
  FieldType,
  FormMetadata,
  FormModule,
  FormPermission,
  ValidationRuleType,
} from "../types";
import { formRegistry } from "../registry";

/**
 * Beneficiary Registration Form (F01.1)
 * Used to capture essential information about senior citizens requiring housing modification services
 */
export const beneficiaryRegistrationForm: FormMetadata = {
  id: "beneficiary-registration-form",
  title: "Beneficiary Registration",
  description:
    "Capture essential information about senior citizens requiring housing modification services",
  module: FormModule.BENEFICIARY,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: [
      "admin",
      "manager",
      "beneficiary-officer",
      "case-manager",
    ],
    [FormPermission.CREATE]: ["admin", "manager", "beneficiary-officer"],
    [FormPermission.EDIT]: ["admin", "manager", "beneficiary-officer"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["admin", "manager"],
    [FormPermission.REJECT]: ["admin", "manager"],
    [FormPermission.SUBMIT]: ["admin", "manager", "beneficiary-officer"],
    [FormPermission.PRINT]: [
      "admin",
      "manager",
      "beneficiary-officer",
      "case-manager",
    ],
    [FormPermission.EXPORT]: ["admin", "manager"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: [
    {
      id: "personal-information",
      title: "Personal Information",
      description: "Basic personal details of the beneficiary",
      order: 1,
      collapsible: false,
    },
    {
      id: "contact-information",
      title: "Contact Information",
      description: "Contact details of the beneficiary",
      order: 2,
      collapsible: false,
    },
    {
      id: "address-information",
      title: "Address Information",
      description: "Residential address details",
      order: 3,
      collapsible: false,
    },
    {
      id: "emergency-contact",
      title: "Emergency Contact",
      description: "Emergency contact information",
      order: 4,
      collapsible: false,
    },
    {
      id: "health-information",
      title: "Health Information",
      description: "Health conditions and mobility status",
      order: 5,
      collapsible: true,
    },
    {
      id: "financial-information",
      title: "Financial Information",
      description: "Income and financial details",
      order: 6,
      collapsible: true,
    },
    {
      id: "housing-information",
      title: "Housing Information",
      description: "Details about current housing situation",
      order: 7,
      collapsible: true,
    },
    {
      id: "documentation",
      title: "Documentation",
      description: "Required documents and photos",
      order: 8,
      collapsible: true,
    },
  ],
  fields: [
    {
      id: "beneficiary-id",
      name: "beneficiaryId",
      label: "Beneficiary ID",
      type: FieldType.TEXT,
      readOnly: true,
      required: false,
      section: "personal-information",
      order: 1,
      width: "full",
      helpText: "Auto-generated unique identifier (Format: BEN-YYYY-NNNNN)",
      defaultValue: "",
    },
    {
      id: "first-name-en",
      name: "firstNameEn",
      label: "First Name (English)",
      type: FieldType.TEXT,
      placeholder: "Enter first name in English",
      required: true,
      section: "personal-information",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "First name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "First name must be at least 2 characters",
        },
      ],
    },
    {
      id: "last-name-en",
      name: "lastNameEn",
      label: "Last Name (English)",
      type: FieldType.TEXT,
      placeholder: "Enter last name in English",
      required: true,
      section: "personal-information",
      order: 3,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Last name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "Last name must be at least 2 characters",
        },
      ],
    },
    {
      id: "first-name-ar",
      name: "firstNameAr",
      label: "First Name (Arabic)",
      type: FieldType.TEXT,
      placeholder: "Enter first name in Arabic",
      required: true,
      section: "personal-information",
      order: 4,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "First name in Arabic is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "First name must be at least 2 characters",
        },
      ],
    },
    {
      id: "last-name-ar",
      name: "lastNameAr",
      label: "Last Name (Arabic)",
      type: FieldType.TEXT,
      placeholder: "Enter last name in Arabic",
      required: true,
      section: "personal-information",
      order: 5,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Last name in Arabic is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "Last name must be at least 2 characters",
        },
      ],
    },
    {
      id: "date-of-birth",
      name: "dateOfBirth",
      label: "Date of Birth",
      type: FieldType.DATE,
      required: true,
      section: "personal-information",
      order: 6,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Date of birth is required",
        },
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const birthDate = new Date(value);
            const today = new Date();
            const age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            if (
              monthDiff < 0 ||
              (monthDiff === 0 && today.getDate() < birthDate.getDate())
            ) {
              return age - 1 >= 60;
            }
            return age >= 60;
          },
          message: "Beneficiary must be at least 60 years old",
        },
      ],
    },
    {
      id: "emirates-id",
      name: "emiratesId",
      label: "Emirates ID",
      type: FieldType.TEXT,
      placeholder: "XXX-XXXX-XXXXXXX-X",
      required: true,
      section: "personal-information",
      order: 7,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Emirates ID is required",
        },
        {
          type: ValidationRuleType.PATTERN,
          value: "^\\d{3}-\\d{4}-\\d{7}-\\d{1}$",
          message:
            "Please enter a valid Emirates ID format (XXX-XXXX-XXXXXXX-X)",
        },
      ],
    },
    {
      id: "gender",
      name: "gender",
      label: "Gender",
      type: FieldType.RADIO,
      required: true,
      section: "personal-information",
      order: 8,
      width: "full",
      options: [
        { value: "Male", label: "Male" },
        { value: "Female", label: "Female" },
      ],
    },
    {
      id: "mobile-number",
      name: "mobileNumber",
      label: "Mobile Number",
      type: FieldType.PHONE,
      placeholder: "+971 XX XXX XXXX",
      required: true,
      section: "contact-information",
      order: 1,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Mobile number is required",
        },
        {
          type: ValidationRuleType.PATTERN,
          value: "^\\+971\\s?\\d{2}\\s?\\d{3}\\s?\\d{4}$",
          message: "Please enter a valid UAE mobile number format",
        },
      ],
    },
    {
      id: "landline-number",
      name: "landlineNumber",
      type: FieldType.PHONE,
      label: "Landline Number",
      placeholder: "+971 X XXX XXXX",
      required: false,
      section: "contact-information",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.PATTERN,
          value: "^\\+971\\s?\\d{1}\\s?\\d{3}\\s?\\d{4}$",
          message: "Please enter a valid UAE landline number format",
        },
      ],
    },
    {
      id: "email",
      name: "email",
      label: "Email",
      type: FieldType.EMAIL,
      placeholder: "example@example.com",
      required: false,
      section: "contact-information",
      order: 3,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.EMAIL,
          message: "Please enter a valid email address",
        },
      ],
    },
    {
      id: "address-emirate",
      name: "addressEmirate",
      label: "Emirate",
      type: FieldType.SELECT,
      required: true,
      section: "address-information",
      order: 1,
      width: "half",
      options: [
        { value: "Abu Dhabi", label: "Abu Dhabi" },
        { value: "Dubai", label: "Dubai" },
        { value: "Sharjah", label: "Sharjah" },
        { value: "Ajman", label: "Ajman" },
        { value: "Umm Al Quwain", label: "Umm Al Quwain" },
        { value: "Ras Al Khaimah", label: "Ras Al Khaimah" },
        { value: "Fujairah", label: "Fujairah" },
      ],
    },
    {
      id: "address-city",
      name: "addressCity",
      label: "City",
      type: FieldType.TEXT,
      placeholder: "Enter city name",
      required: true,
      section: "address-information",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "City is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "City name must be at least 2 characters",
        },
      ],
    },
    {
      id: "address-area",
      name: "addressArea",
      label: "Area",
      type: FieldType.TEXT,
      placeholder: "Enter area name",
      required: true,
      section: "address-information",
      order: 3,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Area is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "Area name must be at least 2 characters",
        },
      ],
    },
    {
      id: "address-street",
      name: "addressStreet",
      label: "Street",
      type: FieldType.TEXT,
      placeholder: "Enter street name",
      required: true,
      section: "address-information",
      order: 4,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Street is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "Street name must be at least 2 characters",
        },
      ],
    },
    {
      id: "address-building-villa",
      name: "addressBuildingVilla",
      label: "Building/Villa Number",
      type: FieldType.TEXT,
      placeholder: "Enter building or villa number",
      required: true,
      section: "address-information",
      order: 5,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Building/Villa number is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 2,
          message: "Building/Villa number must be at least 2 characters",
        },
      ],
    },
    {
      id: "address-gps-coordinates",
      name: "addressGpsCoordinates",
      label: "GPS Coordinates",
      type: FieldType.LOCATION,
      required: true,
      section: "address-information",
      order: 6,
      width: "full",
      helpText: "Select the location on the map",
    },
    {
      id: "emergency-contact-name",
      name: "emergencyContactName",
      label: "Emergency Contact Name",
      type: FieldType.TEXT,
      placeholder: "Enter full name",
      required: true,
      section: "emergency-contact",
      order: 1,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Emergency contact name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Name must be at least 3 characters",
        },
      ],
    },
    {
      id: "emergency-contact-relation",
      name: "emergencyContactRelation",
      label: "Relationship to Beneficiary",
      type: FieldType.SELECT,
      required: true,
      section: "emergency-contact",
      order: 2,
      width: "half",
      options: [
        { value: "Spouse", label: "Spouse" },
        { value: "Son", label: "Son" },
        { value: "Daughter", label: "Daughter" },
        { value: "Sibling", label: "Sibling" },
        { value: "Other Relative", label: "Other Relative" },
        { value: "Friend", label: "Friend" },
        { value: "Caregiver", label: "Caregiver" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "emergency-contact-number",
      name: "emergencyContactNumber",
      label: "Emergency Contact Number",
      type: FieldType.PHONE,
      placeholder: "+971 XX XXX XXXX",
      required: true,
      section: "emergency-contact",
      order: 3,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Emergency contact number is required",
        },
        {
          type: ValidationRuleType.PATTERN,
          value: "^\\+971\\s?\\d{2}\\s?\\d{3}\\s?\\d{4}$",
          message: "Please enter a valid UAE phone number format",
        },
      ],
    },
    {
      id: "health-conditions",
      name: "healthConditions",
      label: "Health Conditions",
      type: FieldType.MULTISELECT,
      required: true,
      section: "health-information",
      order: 1,
      width: "full",
      options: [
        { value: "Mobility Impairment", label: "Mobility Impairment" },
        { value: "Visual Impairment", label: "Visual Impairment" },
        { value: "Hearing Impairment", label: "Hearing Impairment" },
        { value: "Cognitive Impairment", label: "Cognitive Impairment" },
        { value: "Cardiovascular Disease", label: "Cardiovascular Disease" },
        { value: "Respiratory Disease", label: "Respiratory Disease" },
        { value: "Diabetes", label: "Diabetes" },
        { value: "Arthritis", label: "Arthritis" },
        { value: "Osteoporosis", label: "Osteoporosis" },
        { value: "Neurological Disorder", label: "Neurological Disorder" },
        { value: "Other", label: "Other" },
      ],
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "At least one health condition must be selected",
        },
      ],
    },
    {
      id: "mobility-status",
      name: "mobilityStatus",
      label: "Mobility Status",
      type: FieldType.SELECT,
      required: true,
      section: "health-information",
      order: 2,
      width: "full",
      options: [
        { value: "Independent", label: "Independent" },
        { value: "Uses Cane", label: "Uses Cane" },
        { value: "Uses Walker", label: "Uses Walker" },
        { value: "Uses Wheelchair", label: "Uses Wheelchair" },
        { value: "Bedridden", label: "Bedridden" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "income-source",
      name: "incomeSource",
      label: "Primary Source of Income",
      type: FieldType.SELECT,
      required: true,
      section: "financial-information",
      order: 1,
      width: "half",
      options: [
        { value: "Pension", label: "Pension" },
        { value: "Family Support", label: "Family Support" },
        { value: "Government Aid", label: "Government Aid" },
        { value: "Personal Savings", label: "Personal Savings" },
        { value: "Investment", label: "Investment" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "monthly-income",
      name: "monthlyIncome",
      label: "Monthly Income (AED)",
      type: FieldType.NUMBER,
      required: true,
      section: "financial-information",
      order: 2,
      width: "half",
      defaultValue: 0,
      validation: [
        {
          type: ValidationRuleType.MIN_VALUE,
          value: 0,
          message: "Monthly income cannot be negative",
        },
      ],
    },
    {
      id: "family-size",
      name: "familySize",
      label: "Number of Family Members",
      type: FieldType.NUMBER,
      required: true,
      section: "financial-information",
      order: 3,
      width: "full",
      defaultValue: 1,
      validation: [
        {
          type: ValidationRuleType.MIN_VALUE,
          value: 1,
          message: "Family size must be at least 1",
        },
      ],
    },
    {
      id: "house-ownership",
      name: "houseOwnership",
      label: "House Ownership Status",
      type: FieldType.SELECT,
      required: true,
      section: "housing-information",
      order: 1,
      width: "full",
      options: [
        { value: "Owned", label: "Owned" },
        { value: "Rented", label: "Rented" },
        { value: "Family Owned", label: "Family Owned" },
        { value: "Government Provided", label: "Government Provided" },
        { value: "Other", label: "Other" },
      ],
    },
    {
      id: "registration-date",
      name: "registrationDate",
      label: "Registration Date",
      type: FieldType.DATE,
      required: true,
      section: "housing-information",
      order: 2,
      width: "full",
      defaultValue: new Date().toISOString().split("T")[0],
      validation: [
        {
          type: ValidationRuleType.CUSTOM,
          value: (value: string) => {
            const regDate = new Date(value);
            const today = new Date();
            return regDate <= today;
          },
          message: "Registration date cannot be in the future",
        },
      ],
    },
    {
      id: "photo",
      name: "photo",
      label: "Beneficiary Photo",
      type: FieldType.IMAGE,
      required: true,
      section: "documentation",
      order: 1,
      width: "full",
      helpText: "Upload a clear photo of the beneficiary (max 5MB)",
    },
    {
      id: "documents",
      name: "documents",
      label: "Supporting Documents",
      type: FieldType.FILE,
      required: false,
      section: "documentation",
      order: 2,
      width: "full",
      helpText: "Upload supporting documents (PDF/Image, max 10MB each)",
      multiple: true,
    },
    {
      id: "status",
      name: "status",
      label: "Status",
      type: FieldType.HIDDEN,
      required: false,
      section: "documentation",
      order: 3,
      width: "full",
      defaultValue: "Pending",
    },
  ],
  dependencies: [],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

// Register form with the form registry
export function registerBeneficiaryForm() {
  formRegistry.registerForm(
    {
      id: beneficiaryRegistrationForm.id,
      title: beneficiaryRegistrationForm.title,
      description: beneficiaryRegistrationForm.description,
      module: FormModule.BENEFICIARY,
      clientTypes: beneficiaryRegistrationForm.clientTypes,
      permissions: beneficiaryRegistrationForm.permissions,
      dependencies: beneficiaryRegistrationForm.dependencies,
      version: beneficiaryRegistrationForm.version,
      path: "/beneficiary/registration",
      icon: "user",
      isActive: true,
    },
    beneficiaryRegistrationForm,
  );
}