import { formRegistry } from "../registry";
import {
  ClientType,
  FieldType,
  FormField,
  FormMetadata,
  FormModule,
  FormPermission,
  FormRegistryEntry,
  FormSection,
  ValidationRuleType,
} from "../types";

// Expense Tracking Form
const expenseTrackingFormFields: FormField[] = [
  {
    id: "expenseTitle",
    name: "expenseTitle",
    label: "Expense Title",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Expense title is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "expenseDate",
    name: "expenseDate",
    label: "Expense Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Expense date is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "budgetId",
    name: "budgetId",
    label: "Budget",
    type: FieldType.SELECT,
    required: true,
    dataSource: {
      type: "api",
      source: "/api/budgets",
      valueField: "id",
      labelField: "title",
    },
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Budget is required",
      },
    ],
    section: "basicInfo",
    order: 3,
  },
  {
    id: "categoryId",
    name: "categoryId",
    label: "Budget Category",
    type: FieldType.SELECT,
    required: true,
    dataSource: {
      type: "api",
      source: "/api/budget-categories",
      valueField: "id",
      labelField: "name",
      dependsOn: ["budgetId"],
    },
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Budget category is required",
      },
    ],
    section: "basicInfo",
    order: 4,
  },
  {
    id: "amount",
    name: "amount",
    label: "Amount",
    type: FieldType.NUMBER,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Amount is required",
      },
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0.01,
        message: "Amount must be greater than 0",
      },
    ],
    section: "basicInfo",
    order: 5,
  },
  {
    id: "paymentMethod",
    name: "paymentMethod",
    label: "Payment Method",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "cash", label: "Cash" },
      { value: "credit_card", label: "Credit Card" },
      { value: "bank_transfer", label: "Bank Transfer" },
      { value: "check", label: "Check" },
      { value: "other", label: "Other" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment method is required",
      },
    ],
    section: "paymentDetails",
    order: 1,
  },
  {
    id: "paymentReference",
    name: "paymentReference",
    label: "Payment Reference",
    type: FieldType.TEXT,
    placeholder: "e.g., Receipt number, transaction ID",
    section: "paymentDetails",
    order: 2,
  },
  {
    id: "vendorId",
    name: "vendorId",
    label: "Vendor",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/vendors",
      valueField: "id",
      labelField: "name",
    },
    section: "paymentDetails",
    order: 3,
  },
  {
    id: "description",
    name: "description",
    label: "Description",
    type: FieldType.TEXTAREA,
    placeholder: "Enter expense description",
    section: "additionalInfo",
    order: 1,
  },
  {
    id: "receiptImage",
    name: "receiptImage",
    label: "Receipt Image",
    type: FieldType.FILE,
    section: "additionalInfo",
    order: 2,
  },
  {
    id: "projectId",
    name: "projectId",
    label: "Related Project",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/projects",
      valueField: "id",
      labelField: "name",
    },
    section: "additionalInfo",
    order: 3,
  },
];

const expenseTrackingSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic expense information",
    order: 1,
  },
  {
    id: "paymentDetails",
    title: "Payment Details",
    description: "Enter payment method and vendor information",
    order: 2,
  },
  {
    id: "additionalInfo",
    title: "Additional Information",
    description: "Add description and supporting documents",
    order: 3,
  },
];

const expenseTrackingMetadata: FormMetadata = {
  id: "expense-tracking-form",
  title: "Expense Tracking Form",
  description: "Form for tracking expenses against budget categories",
  module: FormModule.FINANCIAL,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.CREATE]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.EDIT]: ["finance_manager", "admin"],
    [FormPermission.DELETE]: ["finance_manager", "admin"],
    [FormPermission.APPROVE]: ["finance_manager", "admin"],
    [FormPermission.REJECT]: ["finance_manager", "admin"],
    [FormPermission.SUBMIT]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.PRINT]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.EXPORT]: ["finance_manager", "admin"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: expenseTrackingSections,
  fields: expenseTrackingFormFields,
  dependencies: [
    {
      formId: "budget-planning-form",
      description: "Budget must exist before tracking expenses",
      type: "prerequisite",
      required: true,
    },
  ],
  workflow: "expense-approval-workflow",
  submitEndpoint: "/api/finance/expenses",
  fetchDataEndpoint: "/api/finance/expenses/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const expenseTrackingEntry: FormRegistryEntry = {
  id: "expense-tracking-form",
  title: "Expense Tracking Form",
  description: "Form for tracking expenses against budget categories",
  module: FormModule.FINANCIAL,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: expenseTrackingMetadata.permissions,
  dependencies: expenseTrackingMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/finance/expenses",
  icon: "Receipt",
  isActive: true,
};

// Invoice Management Form
const invoiceManagementFormFields: FormField[] = [
  {
    id: "invoiceNumber",
    name: "invoiceNumber",
    label: "Invoice Number",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Invoice number is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "invoiceDate",
    name: "invoiceDate",
    label: "Invoice Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Invoice date is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "dueDate",
    name: "dueDate",
    label: "Due Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Due date is required",
      },
    ],
    section: "basicInfo",
    order: 3,
  },
  {
    id: "vendorId",
    name: "vendorId",
    label: "Vendor",
    type: FieldType.SELECT,
    required: true,
    dataSource: {
      type: "api",
      source: "/api/vendors",
      valueField: "id",
      labelField: "name",
    },
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Vendor is required",
      },
    ],
    section: "basicInfo",
    order: 4,
  },
  {
    id: "budgetId",
    name: "budgetId",
    label: "Budget",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/budgets",
      valueField: "id",
      labelField: "title",
    },
    section: "basicInfo",
    order: 5,
  },
  {
    id: "projectId",
    name: "projectId",
    label: "Project",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/projects",
      valueField: "id",
      labelField: "name",
    },
    section: "basicInfo",
    order: 6,
  },
  {
    id: "invoiceItems",
    name: "invoiceItems",
    label: "Invoice Items",
    type: FieldType.REPEATER,
    section: "invoiceDetails",
    order: 1,
    defaultValue: [
      {
        description: "",
        quantity: 1,
        unitPrice: 0,
        amount: 0,
        categoryId: "",
      },
    ],
  },
  {
    id: "subtotal",
    name: "subtotal",
    label: "Subtotal",
    type: FieldType.CALCULATED,
    calculationFormula: "sum(invoiceItems.*.amount)",
    readOnly: true,
    section: "invoiceDetails",
    order: 2,
  },
  {
    id: "taxRate",
    name: "taxRate",
    label: "Tax Rate (%)",
    type: FieldType.NUMBER,
    defaultValue: 0,
    section: "invoiceDetails",
    order: 3,
  },
  {
    id: "taxAmount",
    name: "taxAmount",
    label: "Tax Amount",
    type: FieldType.CALCULATED,
    calculationFormula: "subtotal * (taxRate / 100)",
    readOnly: true,
    section: "invoiceDetails",
    order: 4,
  },
  {
    id: "totalAmount",
    name: "totalAmount",
    label: "Total Amount",
    type: FieldType.CALCULATED,
    calculationFormula: "subtotal + taxAmount",
    readOnly: true,
    section: "invoiceDetails",
    order: 5,
  },
  {
    id: "paymentStatus",
    name: "paymentStatus",
    label: "Payment Status",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "pending", label: "Pending" },
      { value: "partial", label: "Partially Paid" },
      { value: "paid", label: "Paid" },
      { value: "overdue", label: "Overdue" },
      { value: "cancelled", label: "Cancelled" },
    ],
    defaultValue: "pending",
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment status is required",
      },
    ],
    section: "paymentInfo",
    order: 1,
  },
  {
    id: "paymentDate",
    name: "paymentDate",
    label: "Payment Date",
    type: FieldType.DATE,
    conditional: { field: "paymentStatus", operator: "==", value: "paid" },
    section: "paymentInfo",
    order: 2,
  },
  {
    id: "paymentMethod",
    name: "paymentMethod",
    label: "Payment Method",
    type: FieldType.SELECT,
    options: [
      { value: "cash", label: "Cash" },
      { value: "credit_card", label: "Credit Card" },
      { value: "bank_transfer", label: "Bank Transfer" },
      { value: "check", label: "Check" },
      { value: "other", label: "Other" },
    ],
    conditional: {
      field: "paymentStatus",
      operator: "in",
      value: ["paid", "partial"],
    },
    section: "paymentInfo",
    order: 3,
  },
  {
    id: "paymentReference",
    name: "paymentReference",
    label: "Payment Reference",
    type: FieldType.TEXT,
    conditional: {
      field: "paymentStatus",
      operator: "in",
      value: ["paid", "partial"],
    },
    section: "paymentInfo",
    order: 4,
  },
  {
    id: "notes",
    name: "notes",
    label: "Notes",
    type: FieldType.TEXTAREA,
    placeholder: "Enter any additional notes",
    section: "additionalInfo",
    order: 1,
  },
  {
    id: "invoiceDocument",
    name: "invoiceDocument",
    label: "Invoice Document",
    type: FieldType.FILE,
    section: "additionalInfo",
    order: 2,
  },
];

const invoiceManagementSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic invoice information",
    order: 1,
  },
  {
    id: "invoiceDetails",
    title: "Invoice Details",
    description: "Enter invoice line items and amounts",
    order: 2,
  },
  {
    id: "paymentInfo",
    title: "Payment Information",
    description: "Enter payment status and details",
    order: 3,
  },
  {
    id: "additionalInfo",
    title: "Additional Information",
    description: "Add notes and supporting documents",
    order: 4,
  },
];

const invoiceManagementMetadata: FormMetadata = {
  id: "invoice-management-form",
  title: "Invoice Management Form",
  description: "Form for managing vendor invoices",
  module: FormModule.FINANCIAL,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.CREATE]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.EDIT]: ["finance_manager", "admin"],
    [FormPermission.DELETE]: ["finance_manager", "admin"],
    [FormPermission.APPROVE]: ["finance_manager", "admin"],
    [FormPermission.REJECT]: ["finance_manager", "admin"],
    [FormPermission.SUBMIT]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.PRINT]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.EXPORT]: ["finance_manager", "admin"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: invoiceManagementSections,
  fields: invoiceManagementFormFields,
  dependencies: [],
  workflow: "invoice-approval-workflow",
  submitEndpoint: "/api/finance/invoices",
  fetchDataEndpoint: "/api/finance/invoices/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const invoiceManagementEntry: FormRegistryEntry = {
  id: "invoice-management-form",
  title: "Invoice Management Form",
  description: "Form for managing vendor invoices",
  module: FormModule.FINANCIAL,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: invoiceManagementMetadata.permissions,
  dependencies: invoiceManagementMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/finance/invoices",
  icon: "FileText",
  isActive: true,
};

// Payment Processing Form
const paymentProcessingFormFields: FormField[] = [
  {
    id: "paymentTitle",
    name: "paymentTitle",
    label: "Payment Title",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment title is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "paymentDate",
    name: "paymentDate",
    label: "Payment Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment date is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "paymentType",
    name: "paymentType",
    label: "Payment Type",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "invoice", label: "Invoice Payment" },
      { value: "expense", label: "Expense Reimbursement" },
      { value: "advance", label: "Advance Payment" },
      { value: "other", label: "Other Payment" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment type is required",
      },
    ],
    section: "basicInfo",
    order: 3,
  },
  {
    id: "invoiceId",
    name: "invoiceId",
    label: "Invoice",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/finance/invoices",
      valueField: "id",
      labelField: "invoiceNumber",
    },
    conditional: { field: "paymentType", operator: "==", value: "invoice" },
    section: "paymentDetails",
    order: 1,
  },
  {
    id: "expenseId",
    name: "expenseId",
    label: "Expense",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/finance/expenses",
      valueField: "id",
      labelField: "expenseTitle",
    },
    conditional: { field: "paymentType", operator: "==", value: "expense" },
    section: "paymentDetails",
    order: 2,
  },
  {
    id: "payeeType",
    name: "payeeType",
    label: "Payee Type",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "vendor", label: "Vendor" },
      { value: "employee", label: "Employee" },
      { value: "contractor", label: "Contractor" },
      { value: "other", label: "Other" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payee type is required",
      },
    ],
    section: "paymentDetails",
    order: 3,
  },
  {
    id: "payeeId",
    name: "payeeId",
    label: "Payee",
    type: FieldType.SELECT,
    required: true,
    dataSource: {
      type: "function",
      source: "getPayeesByType",
      valueField: "id",
      labelField: "name",
      dependsOn: ["payeeType"],
    },
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payee is required",
      },
    ],
    section: "paymentDetails",
    order: 4,
  },
  {
    id: "amount",
    name: "amount",
    label: "Payment Amount",
    type: FieldType.NUMBER,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment amount is required",
      },
      {
        type: ValidationRuleType.MIN_VALUE,
        value: 0.01,
        message: "Payment amount must be greater than 0",
      },
    ],
    section: "paymentDetails",
    order: 5,
  },
  {
    id: "paymentMethod",
    name: "paymentMethod",
    label: "Payment Method",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "cash", label: "Cash" },
      { value: "credit_card", label: "Credit Card" },
      { value: "bank_transfer", label: "Bank Transfer" },
      { value: "check", label: "Check" },
      { value: "other", label: "Other" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Payment method is required",
      },
    ],
    section: "paymentMethod",
    order: 1,
  },
  {
    id: "accountNumber",
    name: "accountNumber",
    label: "Account Number",
    type: FieldType.TEXT,
    conditional: {
      field: "paymentMethod",
      operator: "in",
      value: ["bank_transfer", "credit_card"],
    },
    section: "paymentMethod",
    order: 2,
  },
  {
    id: "checkNumber",
    name: "checkNumber",
    label: "Check Number",
    type: FieldType.TEXT,
    conditional: { field: "paymentMethod", operator: "==", value: "check" },
    section: "paymentMethod",
    order: 3,
  },
  {
    id: "transactionReference",
    name: "transactionReference",
    label: "Transaction Reference",
    type: FieldType.TEXT,
    section: "paymentMethod",
    order: 4,
  },
  {
    id: "budgetId",
    name: "budgetId",
    label: "Budget",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/budgets",
      valueField: "id",
      labelField: "title",
    },
    section: "accounting",
    order: 1,
  },
  {
    id: "categoryId",
    name: "categoryId",
    label: "Budget Category",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/budget-categories",
      valueField: "id",
      labelField: "name",
      dependsOn: ["budgetId"],
    },
    section: "accounting",
    order: 2,
  },
  {
    id: "notes",
    name: "notes",
    label: "Notes",
    type: FieldType.TEXTAREA,
    placeholder: "Enter any additional notes",
    section: "additionalInfo",
    order: 1,
  },
  {
    id: "attachments",
    name: "attachments",
    label: "Supporting Documents",
    type: FieldType.FILE,
    section: "additionalInfo",
    order: 2,
  },
];

const paymentProcessingSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic payment information",
    order: 1,
  },
  {
    id: "paymentDetails",
    title: "Payment Details",
    description: "Enter payment details and payee information",
    order: 2,
  },
  {
    id: "paymentMethod",
    title: "Payment Method",
    description: "Enter payment method details",
    order: 3,
  },
  {
    id: "accounting",
    title: "Accounting Information",
    description: "Enter budget and category information",
    order: 4,
  },
  {
    id: "additionalInfo",
    title: "Additional Information",
    description: "Add notes and supporting documents",
    order: 5,
  },
];

const paymentProcessingMetadata: FormMetadata = {
  id: "payment-processing-form",
  title: "Payment Processing Form",
  description: "Form for processing payments to vendors and employees",
  module: FormModule.FINANCIAL,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.CREATE]: ["finance_manager", "admin"],
    [FormPermission.EDIT]: ["finance_manager", "admin"],
    [FormPermission.DELETE]: ["finance_manager", "admin"],
    [FormPermission.APPROVE]: ["finance_manager", "admin"],
    [FormPermission.REJECT]: ["finance_manager", "admin"],
    [FormPermission.SUBMIT]: ["finance_manager", "admin"],
    [FormPermission.PRINT]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.EXPORT]: ["finance_manager", "admin"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: paymentProcessingSections,
  fields: paymentProcessingFormFields,
  dependencies: [],
  workflow: "payment-approval-workflow",
  submitEndpoint: "/api/finance/payments",
  fetchDataEndpoint: "/api/finance/payments/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const paymentProcessingEntry: FormRegistryEntry = {
  id: "payment-processing-form",
  title: "Payment Processing Form",
  description: "Form for processing payments to vendors and employees",
  module: FormModule.FINANCIAL,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: paymentProcessingMetadata.permissions,
  dependencies: paymentProcessingMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/finance/payments",
  icon: "CreditCard",
  isActive: true,
};

// Financial Reporting Form
const financialReportingFormFields: FormField[] = [
  {
    id: "reportTitle",
    name: "reportTitle",
    label: "Report Title",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Report title is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "reportType",
    name: "reportType",
    label: "Report Type",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "budget_variance", label: "Budget Variance Report" },
      { value: "expense_summary", label: "Expense Summary Report" },
      { value: "income_statement", label: "Income Statement" },
      { value: "balance_sheet", label: "Balance Sheet" },
      { value: "cash_flow", label: "Cash Flow Statement" },
      { value: "project_financial", label: "Project Financial Report" },
      { value: "custom", label: "Custom Report" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Report type is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "startDate",
    name: "startDate",
    label: "Start Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Start date is required",
      },
    ],
    section: "basicInfo",
    order: 3,
  },
  {
    id: "endDate",
    name: "endDate",
    label: "End Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "End date is required",
      },
    ],
    section: "basicInfo",
    order: 4,
  },
  {
    id: "fiscalYear",
    name: "fiscalYear",
    label: "Fiscal Year",
    type: FieldType.SELECT,
    options: [
      { value: "2023", label: "2023" },
      { value: "2024", label: "2024" },
      { value: "2025", label: "2025" },
      { value: "2026", label: "2026" },
    ],
    section: "basicInfo",
    order: 5,
  },
  {
    id: "budgetId",
    name: "budgetId",
    label: "Budget",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/budgets",
      valueField: "id",
      labelField: "title",
    },
    conditional: {
      field: "reportType",
      operator: "==",
      value: "budget_variance",
    },
    section: "reportParameters",
    order: 1,
  },
  {
    id: "projectId",
    name: "projectId",
    label: "Project",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/projects",
      valueField: "id",
      labelField: "name",
    },
    conditional: {
      field: "reportType",
      operator: "==",
      value: "project_financial",
    },
    section: "reportParameters",
    order: 2,
  },
  {
    id: "departmentId",
    name: "departmentId",
    label: "Department",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/departments",
      valueField: "id",
      labelField: "name",
    },
    section: "reportParameters",
    order: 3,
  },
  {
    id: "includeCategories",
    name: "includeCategories",
    label: "Include Categories",
    type: FieldType.MULTISELECT,
    dataSource: {
      type: "api",
      source: "/api/budget-categories",
      valueField: "id",
      labelField: "name",
    },
    section: "reportParameters",
    order: 4,
  },
  {
    id: "compareWithPrevious",
    name: "compareWithPrevious",
    label: "Compare with Previous Period",
    type: FieldType.CHECKBOX,
    defaultValue: false,
    section: "reportOptions",
    order: 1,
  },
  {
    id: "showChart",
    name: "showChart",
    label: "Include Charts",
    type: FieldType.CHECKBOX,
    defaultValue: true,
    section: "reportOptions",
    order: 2,
  },
  {
    id: "chartType",
    name: "chartType",
    label: "Chart Type",
    type: FieldType.SELECT,
    options: [
      { value: "bar", label: "Bar Chart" },
      { value: "line", label: "Line Chart" },
      { value: "pie", label: "Pie Chart" },
      { value: "stacked_bar", label: "Stacked Bar Chart" },
    ],
    defaultValue: "bar",
    conditional: { field: "showChart", operator: "==", value: true },
    section: "reportOptions",
    order: 3,
  },
  {
    id: "fileFormat",
    name: "fileFormat",
    label: "File Format",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "pdf", label: "PDF" },
      { value: "excel", label: "Excel" },
      { value: "csv", label: "CSV" },
      { value: "html", label: "HTML" },
    ],
    defaultValue: "pdf",
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "File format is required",
      },
    ],
    section: "reportOptions",
    order: 4,
  },
  {
    id: "notes",
    name: "notes",
    label: "Notes",
    type: FieldType.TEXTAREA,
    placeholder: "Enter any additional notes for the report",
    section: "additionalInfo",
    order: 1,
  },
];

const financialReportingSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic report information",
    order: 1,
  },
  {
    id: "reportParameters",
    title: "Report Parameters",
    description: "Select specific parameters for the report",
    order: 2,
  },
  {
    id: "reportOptions",
    title: "Report Options",
    description: "Configure report display options",
    order: 3,
  },
  {
    id: "additionalInfo",
    title: "Additional Information",
    description: "Add notes for the report",
    order: 4,
  },
];

const financialReportingMetadata: FormMetadata = {
  id: "financial-reporting-form",
  title: "Financial Reporting Form",
  description: "Form for generating financial reports",
  module: FormModule.FINANCIAL,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: [
      "finance_manager",
      "admin",
      "finance_staff",
      "executive",
    ],
    [FormPermission.CREATE]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.EDIT]: ["finance_manager", "admin"],
    [FormPermission.DELETE]: ["finance_manager", "admin"],
    [FormPermission.APPROVE]: ["finance_manager", "admin"],
    [FormPermission.REJECT]: ["finance_manager", "admin"],
    [FormPermission.SUBMIT]: ["finance_manager", "admin", "finance_staff"],
    [FormPermission.PRINT]: [
      "finance_manager",
      "admin",
      "finance_staff",
      "executive",
    ],
    [FormPermission.EXPORT]: [
      "finance_manager",
      "admin",
      "finance_staff",
      "executive",
    ],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: financialReportingSections,
  fields: financialReportingFormFields,
  dependencies: [],
  workflow: "",
  submitEndpoint: "/api/finance/reports/generate",
  fetchDataEndpoint: "/api/finance/reports/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const financialReportingEntry: FormRegistryEntry = {
  id: "financial-reporting-form",
  title: "Financial Reporting Form",
  description: "Form for generating financial reports",
  module: FormModule.FINANCIAL,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: financialReportingMetadata.permissions,
  dependencies: financialReportingMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/finance/reports",
  icon: "BarChart",
  isActive: true,
};

// Audit Trail Form
const auditTrailFormFields: FormField[] = [
  {
    id: "auditTitle",
    name: "auditTitle",
    label: "Audit Title",
    type: FieldType.TEXT,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Audit title is required",
      },
    ],
    section: "basicInfo",
    order: 1,
  },
  {
    id: "auditType",
    name: "auditType",
    label: "Audit Type",
    type: FieldType.SELECT,
    required: true,
    options: [
      { value: "financial", label: "Financial Audit" },
      { value: "compliance", label: "Compliance Audit" },
      { value: "operational", label: "Operational Audit" },
      { value: "investigative", label: "Investigative Audit" },
      { value: "other", label: "Other" },
    ],
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Audit type is required",
      },
    ],
    section: "basicInfo",
    order: 2,
  },
  {
    id: "startDate",
    name: "startDate",
    label: "Start Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Start date is required",
      },
    ],
    section: "basicInfo",
    order: 3,
  },
  {
    id: "endDate",
    name: "endDate",
    label: "End Date",
    type: FieldType.DATE,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "End date is required",
      },
    ],
    section: "basicInfo",
    order: 4,
  },
  {
    id: "departmentId",
    name: "departmentId",
    label: "Department",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/departments",
      valueField: "id",
      labelField: "name",
    },
    section: "basicInfo",
    order: 5,
  },
  {
    id: "auditScope",
    name: "auditScope",
    label: "Audit Scope",
    type: FieldType.TEXTAREA,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Audit scope is required",
      },
    ],
    section: "auditDetails",
    order: 1,
  },
  {
    id: "auditObjectives",
    name: "auditObjectives",
    label: "Audit Objectives",
    type: FieldType.TEXTAREA,
    required: true,
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Audit objectives are required",
      },
    ],
    section: "auditDetails",
    order: 2,
  },
  {
    id: "auditFindings",
    name: "auditFindings",
    label: "Audit Findings",
    type: FieldType.REPEATER,
    section: "findings",
    order: 1,
    defaultValue: [
      {
        findingTitle: "",
        findingDescription: "",
        riskLevel: "medium",
        recommendation: "",
      },
    ],
  },
  {
    id: "auditConclusion",
    name: "auditConclusion",
    label: "Audit Conclusion",
    type: FieldType.TEXTAREA,
    section: "conclusion",
    order: 1,
  },
  {
    id: "followUpRequired",
    name: "followUpRequired",
    label: "Follow-up Required",
    type: FieldType.CHECKBOX,
    defaultValue: false,
    section: "conclusion",
    order: 2,
  },
  {
    id: "followUpDate",
    name: "followUpDate",
    label: "Follow-up Date",
    type: FieldType.DATE,
    conditional: { field: "followUpRequired", operator: "==", value: true },
    section: "conclusion",
    order: 3,
  },
  {
    id: "auditorId",
    name: "auditorId",
    label: "Auditor",
    type: FieldType.SELECT,
    required: true,
    dataSource: {
      type: "api",
      source: "/api/users",
      valueField: "id",
      labelField: "name",
      filters: { role: "auditor" },
    },
    validation: [
      {
        type: ValidationRuleType.REQUIRED,
        message: "Auditor is required",
      },
    ],
    section: "auditorInfo",
    order: 1,
  },
  {
    id: "reviewerId",
    name: "reviewerId",
    label: "Reviewer",
    type: FieldType.SELECT,
    dataSource: {
      type: "api",
      source: "/api/users",
      valueField: "id",
      labelField: "name",
      filters: { role: "finance_manager" },
    },
    section: "auditorInfo",
    order: 2,
  },
  {
    id: "attachments",
    name: "attachments",
    label: "Supporting Documents",
    type: FieldType.FILE,
    section: "attachments",
    order: 1,
  },
];

const auditTrailSections: FormSection[] = [
  {
    id: "basicInfo",
    title: "Basic Information",
    description: "Enter the basic audit information",
    order: 1,
  },
  {
    id: "auditDetails",
    title: "Audit Details",
    description: "Enter audit scope and objectives",
    order: 2,
  },
  {
    id: "findings",
    title: "Audit Findings",
    description: "Document audit findings and recommendations",
    order: 3,
  },
  {
    id: "conclusion",
    title: "Conclusion",
    description: "Provide audit conclusion and follow-up requirements",
    order: 4,
  },
  {
    id: "auditorInfo",
    title: "Auditor Information",
    description: "Specify auditor and reviewer details",
    order: 5,
  },
  {
    id: "attachments",
    title: "Supporting Documents",
    description: "Attach any supporting documents",
    order: 6,
  },
];

const auditTrailMetadata: FormMetadata = {
  id: "audit-trail-form",
  title: "Audit Trail Form",
  description: "Form for documenting financial and operational audits",
  module: FormModule.FINANCIAL,
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["finance_manager", "admin", "auditor", "executive"],
    [FormPermission.CREATE]: ["finance_manager", "admin", "auditor"],
    [FormPermission.EDIT]: ["finance_manager", "admin", "auditor"],
    [FormPermission.DELETE]: ["finance_manager", "admin"],
    [FormPermission.APPROVE]: ["finance_manager", "admin"],
    [FormPermission.REJECT]: ["finance_manager", "admin"],
    [FormPermission.SUBMIT]: ["finance_manager", "admin", "auditor"],
    [FormPermission.PRINT]: [
      "finance_manager",
      "admin",
      "auditor",
      "executive",
    ],
    [FormPermission.EXPORT]: [
      "finance_manager",
      "admin",
      "auditor",
      "executive",
    ],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: auditTrailSections,
  fields: auditTrailFormFields,
  dependencies: [],
  workflow: "audit-approval-workflow",
  submitEndpoint: "/api/finance/audits",
  fetchDataEndpoint: "/api/finance/audits/{id}",
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

const auditTrailEntry: FormRegistryEntry = {
  id: "audit-trail-form",
  title: "Audit Trail Form",
  description: "Form for documenting financial and operational audits",
  module: FormModule.FINANCIAL,
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  permissions: auditTrailMetadata.permissions,
  dependencies: auditTrailMetadata.dependencies,
  version: "1.0.0",
  path: "/forms/finance/audits",
  icon: "ClipboardCheck",
  isActive: true,
};

// Register all forms
export function registerfinancialforms() {
  formRegistry.registerForm(expenseTrackingEntry, expenseTrackingMetadata);
  formRegistry.registerForm(invoiceManagementEntry, invoiceManagementMetadata);
  formRegistry.registerForm(paymentProcessingEntry, paymentProcessingMetadata);
  formRegistry.registerForm(financialReportingEntry, financialReportingMetadata);
  formRegistry.registerForm(auditTrailEntry, auditTrailMetadata);

}
