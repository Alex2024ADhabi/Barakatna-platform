import {
  ClientType,
  FieldType,
  FormMetadata,
  FormModule,
  FormPermission,
  ValidationRuleType,
} from "../types";
import { formRegistry } from "../registry";

/**
 * Program Definition Form
 * Used for creating and managing programs
 */
export const programDefinitionForm: FormMetadata = {
  id: "program-definition-form",
  title: "Program Definition",
  description: "Create and define a new program",
  module: FormModule.PROJECT, // Using PROJECT as the closest match
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["admin", "manager", "program-manager"],
    [FormPermission.CREATE]: ["admin", "program-manager"],
    [FormPermission.EDIT]: ["admin", "program-manager"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["admin", "manager"],
    [FormPermission.REJECT]: ["admin", "manager"],
    [FormPermission.SUBMIT]: ["admin", "program-manager"],
    [FormPermission.PRINT]: ["admin", "manager", "program-manager"],
    [FormPermission.EXPORT]: ["admin", "manager"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: [
    {
      id: "basic-info",
      title: "Basic Information",
      description: "Enter the basic details of the program",
      order: 1,
      collapsible: false,
    },
    {
      id: "program-details",
      title: "Program Details",
      description: "Detailed information about the program",
      order: 2,
      collapsible: false,
    },
    {
      id: "stakeholders",
      title: "Stakeholders",
      description: "Program stakeholders and their roles",
      order: 3,
      collapsible: true,
    },
    {
      id: "timeline",
      title: "Timeline",
      description: "Program timeline and milestones",
      order: 4,
      collapsible: true,
    },
  ],
  fields: [
    {
      id: "program-name",
      name: "programName",
      label: "Program Name",
      type: FieldType.TEXT,
      placeholder: "Enter program name",
      required: true,
      section: "basic-info",
      order: 1,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Program name is required",
        },
        {
          type: ValidationRuleType.MIN_LENGTH,
          value: 3,
          message: "Program name must be at least 3 characters",
        },
      ],
    },
    {
      id: "program-code",
      name: "programCode",
      label: "Program Code",
      type: FieldType.TEXT,
      placeholder: "Enter program code",
      required: true,
      section: "basic-info",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Program code is required",
        },
        {
          type: ValidationRuleType.PATTERN,
          value: "^[A-Z0-9-]{3,10}$",
          message:
            "Program code must be 3-10 uppercase letters, numbers, or hyphens",
        },
      ],
    },
    {
      id: "client-type",
      name: "clientType",
      label: "Client Type",
      type: FieldType.SELECT,
      required: true,
      section: "basic-info",
      order: 3,
      width: "half",
      options: [
        { value: ClientType.FDF, label: "Family Development Foundation" },
        { value: ClientType.ADHA, label: "Abu Dhabi Housing Authority" },
        { value: ClientType.CASH, label: "Cash Client" },
        { value: ClientType.OTHER, label: "Other" },
      ],
    },
    {
      id: "program-description",
      name: "programDescription",
      label: "Program Description",
      type: FieldType.TEXTAREA,
      placeholder: "Enter detailed program description",
      required: true,
      section: "program-details",
      order: 1,
      width: "full",
      validation: [
        {
          type: ValidationRuleType.REQUIRED,
          message: "Program description is required",
        },
      ],
    },
    {
      id: "program-objectives",
      name: "programObjectives",
      label: "Program Objectives",
      type: FieldType.TEXTAREA,
      placeholder: "Enter program objectives",
      required: true,
      section: "program-details",
      order: 2,
      width: "full",
    },
    {
      id: "program-manager",
      name: "programManager",
      label: "Program Manager",
      type: FieldType.SELECT,
      required: true,
      section: "stakeholders",
      order: 1,
      width: "half",
      dataSource: {
        type: "api",
        source: "/api/users/program-managers",
        valueField: "id",
        labelField: "fullName",
        filters: { active: true },
      },
    },
    {
      id: "stakeholders",
      name: "stakeholders",
      label: "Stakeholders",
      type: FieldType.REPEATER,
      required: false,
      section: "stakeholders",
      order: 2,
      width: "full",
      fields: [
        {
          id: "stakeholder-name",
          name: "stakeholderName",
          label: "Stakeholder Name",
          type: FieldType.TEXT,
          required: true,
          width: "third",
        },
        {
          id: "stakeholder-role",
          name: "stakeholderRole",
          label: "Role",
          type: FieldType.TEXT,
          required: true,
          width: "third",
        },
        {
          id: "stakeholder-contact",
          name: "stakeholderContact",
          label: "Contact Information",
          type: FieldType.TEXT,
          required: false,
          width: "third",
        },
      ],
    },
    {
      id: "start-date",
      name: "startDate",
      label: "Start Date",
      type: FieldType.DATE,
      required: true,
      section: "timeline",
      order: 1,
      width: "half",
    },
    {
      id: "end-date",
      name: "endDate",
      label: "End Date",
      type: FieldType.DATE,
      required: true,
      section: "timeline",
      order: 2,
      width: "half",
      dependencies: [
        {
          type: "validation",
          sourceField: "startDate",
          condition:
            "value && sourceValue && new Date(value) <= new Date(sourceValue)",
          action: "return 'End date must be after start date'",
        },
      ],
    },
    {
      id: "milestones",
      name: "milestones",
      label: "Program Milestones",
      type: FieldType.REPEATER,
      required: false,
      section: "timeline",
      order: 3,
      width: "full",
      fields: [
        {
          id: "milestone-name",
          name: "milestoneName",
          label: "Milestone Name",
          type: FieldType.TEXT,
          required: true,
          width: "third",
        },
        {
          id: "milestone-date",
          name: "milestoneDate",
          label: "Target Date",
          type: FieldType.DATE,
          required: true,
          width: "third",
        },
        {
          id: "milestone-description",
          name: "milestoneDescription",
          label: "Description",
          type: FieldType.TEXT,
          required: false,
          width: "third",
        },
      ],
    },
  ],
  dependencies: [],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

/**
 * Program Performance Tracking Form
 * Used for tracking program performance metrics
 */
export const programPerformanceTrackingForm: FormMetadata = {
  id: "program-performance-tracking-form",
  title: "Program Performance Tracking",
  description: "Track and report on program performance metrics",
  module: FormModule.PROJECT, // Using PROJECT as the closest match
  version: "1.0.0",
  permissions: {
    [FormPermission.VIEW]: ["admin", "manager", "program-manager", "analyst"],
    [FormPermission.CREATE]: ["admin", "program-manager"],
    [FormPermission.EDIT]: ["admin", "program-manager"],
    [FormPermission.DELETE]: ["admin"],
    [FormPermission.APPROVE]: ["admin", "manager"],
    [FormPermission.REJECT]: ["admin", "manager"],
    [FormPermission.SUBMIT]: ["admin", "program-manager"],
    [FormPermission.PRINT]: ["admin", "manager", "program-manager", "analyst"],
    [FormPermission.EXPORT]: ["admin", "manager", "analyst"],
  },
  clientTypes: [
    ClientType.FDF,
    ClientType.ADHA,
    ClientType.CASH,
    ClientType.OTHER,
  ],
  sections: [
    {
      id: "program-reference",
      title: "Program Reference",
      description: "Select the program to track",
      order: 1,
      collapsible: false,
    },
    {
      id: "performance-metrics",
      title: "Performance Metrics",
      description: "Key performance indicators and metrics",
      order: 2,
      collapsible: false,
    },
    {
      id: "challenges",
      title: "Challenges & Risks",
      description: "Document challenges and risks affecting performance",
      order: 3,
      collapsible: true,
    },
    {
      id: "recommendations",
      title: "Recommendations",
      description: "Recommendations for improvement",
      order: 4,
      collapsible: true,
    },
  ],
  fields: [
    {
      id: "program-id",
      name: "programId",
      label: "Program",
      type: FieldType.SELECT,
      required: true,
      section: "program-reference",
      order: 1,
      width: "full",
      dataSource: {
        type: "api",
        source: "/api/programs",
        valueField: "id",
        labelField: "name",
        filters: { active: true },
      },
    },
    {
      id: "reporting-period",
      name: "reportingPeriod",
      label: "Reporting Period",
      type: FieldType.SELECT,
      required: true,
      section: "program-reference",
      order: 2,
      width: "half",
      options: [
        { value: "monthly", label: "Monthly" },
        { value: "quarterly", label: "Quarterly" },
        { value: "biannual", label: "Bi-Annual" },
        { value: "annual", label: "Annual" },
        { value: "custom", label: "Custom Period" },
      ],
    },
    {
      id: "period-start",
      name: "periodStart",
      label: "Period Start Date",
      type: FieldType.DATE,
      required: true,
      section: "program-reference",
      order: 3,
      width: "half",
    },
    {
      id: "period-end",
      name: "periodEnd",
      label: "Period End Date",
      type: FieldType.DATE,
      required: true,
      section: "program-reference",
      order: 4,
      width: "half",
      dependencies: [
        {
          type: "validation",
          sourceField: "periodStart",
          condition:
            "value && sourceValue && new Date(value) <= new Date(sourceValue)",
          action: "return 'End date must be after start date'",
        },
      ],
    },
    {
      id: "kpi-metrics",
      name: "kpiMetrics",
      label: "KPI Metrics",
      type: FieldType.REPEATER,
      required: true,
      section: "performance-metrics",
      order: 1,
      width: "full",
      fields: [
        {
          id: "metric-name",
          name: "metricName",
          label: "Metric Name",
          type: FieldType.TEXT,
          required: true,
          width: "quarter",
        },
        {
          id: "metric-target",
          name: "metricTarget",
          label: "Target",
          type: FieldType.NUMBER,
          required: true,
          width: "quarter",
        },
        {
          id: "metric-actual",
          name: "metricActual",
          label: "Actual",
          type: FieldType.NUMBER,
          required: true,
          width: "quarter",
        },
        {
          id: "metric-status",
          name: "metricStatus",
          label: "Status",
          type: FieldType.SELECT,
          required: true,
          width: "quarter",
          options: [
            { value: "exceeding", label: "Exceeding Target" },
            { value: "meeting", label: "Meeting Target" },
            { value: "below", label: "Below Target" },
            { value: "critical", label: "Critical" },
          ],
        },
      ],
    },
    {
      id: "overall-progress",
      name: "overallProgress",
      label: "Overall Progress (%)",
      type: FieldType.NUMBER,
      required: true,
      section: "performance-metrics",
      order: 2,
      width: "half",
      validation: [
        {
          type: ValidationRuleType.MIN_VALUE,
          value: 0,
          message: "Progress cannot be negative",
        },
        {
          type: ValidationRuleType.MAX_VALUE,
          value: 100,
          message: "Progress cannot exceed 100%",
        },
      ],
    },
    {
      id: "performance-summary",
      name: "performanceSummary",
      label: "Performance Summary",
      type: FieldType.TEXTAREA,
      placeholder: "Provide a summary of the program's performance",
      required: true,
      section: "performance-metrics",
      order: 3,
      width: "full",
    },
    {
      id: "challenges-risks",
      name: "challengesRisks",
      label: "Challenges & Risks",
      type: FieldType.REPEATER,
      required: false,
      section: "challenges",
      order: 1,
      width: "full",
      fields: [
        {
          id: "challenge-description",
          name: "challengeDescription",
          label: "Description",
          type: FieldType.TEXT,
          required: true,
          width: "third",
        },
        {
          id: "impact-level",
          name: "impactLevel",
          label: "Impact Level",
          type: FieldType.SELECT,
          required: true,
          width: "third",
          options: [
            { value: "high", label: "High" },
            { value: "medium", label: "Medium" },
            { value: "low", label: "Low" },
          ],
        },
        {
          id: "mitigation-plan",
          name: "mitigationPlan",
          label: "Mitigation Plan",
          type: FieldType.TEXT,
          required: true,
          width: "third",
        },
      ],
    },
    {
      id: "recommendations",
      name: "recommendations",
      label: "Recommendations",
      type: FieldType.TEXTAREA,
      placeholder: "Provide recommendations for improvement",
      required: false,
      section: "recommendations",
      order: 1,
      width: "full",
    },
    {
      id: "next-steps",
      name: "nextSteps",
      label: "Next Steps",
      type: FieldType.TEXTAREA,
      placeholder: "Outline next steps to implement recommendations",
      required: false,
      section: "recommendations",
      order: 2,
      width: "full",
    },
  ],
  dependencies: [
    {
      formId: "program-definition-form",
      description: "Performance tracking requires an existing program",
      type: "prerequisite",
      required: true,
    },
  ],
  createdAt: new Date(),
  updatedAt: new Date(),
  isActive: true,
};

// Register forms with the form registry
formRegistry.registerForm(
  {
    id: programDefinitionForm.id,
    title: programDefinitionForm.title,
    description: programDefinitionForm.description,
    module: programDefinitionForm.module,
    clientTypes: programDefinitionForm.clientTypes,
    permissions: programDefinitionForm.permissions,
    dependencies: programDefinitionForm.dependencies,
    version: programDefinitionForm.version,
    path: "/programs/define",
    icon: "layers",
    isActive: true,
  },
  programDefinitionForm,
);

formRegistry.registerForm(
  {
    id: programPerformanceTrackingForm.id,
    title: programPerformanceTrackingForm.title,
    description: programPerformanceTrackingForm.description,
    module: programPerformanceTrackingForm.module,
    clientTypes: programPerformanceTrackingForm.clientTypes,
    permissions: programPerformanceTrackingForm.permissions,
    dependencies: programPerformanceTrackingForm.dependencies,
    version: programPerformanceTrackingForm.version,
    path: "/programs/performance",
    icon: "bar-chart-2",
    isActive: true,
  },
  programPerformanceTrackingForm,
);
